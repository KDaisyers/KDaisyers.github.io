{"pages":[{"title":"","text":":root{--fm-theme-color:#56b4f8;--fm-theme-content-color:#fff;--fm-font-size:18px;--fm-margin-li:10px;--fm-border-radius:50%;--fm-width-height:60px;--fm-margin-screen-x:30px;--fm-margin-screen-y:30px;--fm-destination-nth-1-x:30px;--fm-destination-nth-1-y:-70px;--fm-destination-nth-2-x:30px;--fm-destination-nth-2-y:-140px;--fm-destination-nth-3-x:30px;--fm-destination-nth-3-y:-210px;--fm-destination-nth-4-x:30px;--fm-destination-nth-4-y:-280px}ul.fm-ul{opacity:0;position:fixed;padding:var(--fm-margin-li);margin:0;transition:opacity 1s}ul.fm-ul li div.fm-li-content{position:relative;width:var(--fm-width-height);height:var(--fm-width-height);background-color:var(--fm-theme-color);border-radius:var(--fm-border-radius);box-shadow:0 0 4px rgba(0,0,0,0.14),0 4px 8px rgba(0,0,0,0.28)}ul.fm-ul li.fm-li-main{z-index:996;list-style:none;position:relative;width:var(--fm-width-height);height:var(--fm-width-height);cursor:pointer;margin:0}ul.fm-ul ul.fm-ul-component li.fm-li{position:fixed;width:var(--fm-width-height);height:var(--fm-width-height);padding:var(--fm-margin-li);list-style:none;cursor:pointer;-webkit-transform:scale(0);transform:scale(0);transition:all .5s}ul.fm-ul.fm-spring-in ul.fm-ul-component li.fm-li{opacity:0;-webkit-transform:scale(1);transform:scale(1);transition-timing-function:cubic-bezier(0.68,-0.55,0.265,1.55)}ul.fm-ul.fm-spring-in ul.fm-ul-component li.fm-li:nth-child(1){transition-delay:0}ul.fm-ul.fm-spring-in ul.fm-ul-component li.fm-li:nth-child(2){transition-delay:.05s}ul.fm-ul.fm-spring-in ul.fm-ul-component li.fm-li:nth-child(3){transition-delay:.1s}ul.fm-ul.fm-spring-in ul.fm-ul-component li.fm-li:nth-child(4){transition-delay:.15s}ul.fm-ul.fm-spring-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li,ul.fm-ul.fm-spring-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li{opacity:1}ul.fm-ul.fm-spring-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(1),ul.fm-ul.fm-spring-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(1){transition-delay:.05s;transform:translateY(var(--fm-destination-nth-1-y));-webkit-transform:translateY(var(--fm-destination-nth-1-y))}ul.fm-ul.fm-spring-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(2),ul.fm-ul.fm-spring-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(2){transition-delay:.1s;transform:translateY(var(--fm-destination-nth-2-y));-webkit-transform:translateY(var(--fm-destination-nth-2-y))}ul.fm-ul.fm-spring-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(3),ul.fm-ul.fm-spring-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(3){transition-delay:.15s;transform:translateY(var(--fm-destination-nth-3-y));-webkit-transform:translateY(var(--fm-destination-nth-3-y))}ul.fm-ul.fm-spring-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(4),ul.fm-ul.fm-spring-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(4){transition-delay:.2s;transform:translateY(var(--fm-destination-nth-4-y));-webkit-transform:translateY(var(--fm-destination-nth-4-y))}ul.fm-ul.fm-zoom-in ul.fm-ul-component li.fm-li:nth-child(1){transition-delay:0}ul.fm-ul.fm-zoom-in ul.fm-ul-component li.fm-li:nth-child(2){transition-delay:.05s}ul.fm-ul.fm-zoom-in ul.fm-ul-component li.fm-li:nth-child(3){transition-delay:.1s}ul.fm-ul.fm-zoom-in ul.fm-ul-component li.fm-li:nth-child(4){transition-delay:.15s}ul.fm-ul.fm-zoom-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li,ul.fm-ul.fm-zoom-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li{-webkit-transform:scale(1);transform:scale(1)}ul.fm-ul.fm-slide-in ul.fm-ul-component li.fm-li{opacity:0;-webkit-transform:scale(1);transform:scale(1)}ul.fm-ul.fm-slide-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li,ul.fm-ul.fm-slide-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li{opacity:1}ul.fm-ul.fm-slide-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(1),ul.fm-ul.fm-slide-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(1){transform:translateY(var(--fm-destination-nth-1-y));-webkit-transform:translateY(var(--fm-destination-nth-1-y))}ul.fm-ul.fm-slide-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(2),ul.fm-ul.fm-slide-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(2){transform:translateY(var(--fm-destination-nth-2-y));-webkit-transform:translateY(var(--fm-destination-nth-2-y))}ul.fm-ul.fm-slide-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(3),ul.fm-ul.fm-slide-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(3){transform:translateY(var(--fm-destination-nth-3-y));-webkit-transform:translateY(var(--fm-destination-nth-3-y))}ul.fm-ul.fm-slide-in li.fm-li-main:hover+ul.fm-ul-component li.fm-li:nth-child(4),ul.fm-ul.fm-slide-in[data-fm-state=\"open\"] ul.fm-ul-component li.fm-li:nth-child(4){transform:translateY(var(--fm-destination-nth-4-y));-webkit-transform:translateY(var(--fm-destination-nth-4-y))}ul.fm-ul li div.fm-content{display:flex;width:var(--fm-width-height);height:var(--fm-width-height);justify-content:center;align-items:center;color:var(--fm-theme-content-color);font-size:var(--fm-font-size)}ul.fm-ul li div.fm-li-content div.fm-li-title{position:absolute;width:max-content;height:var(--fm-width-height);display:inline-flex;align-items:center;visibility:hidden;opacity:0;transition:opacity .5s}ul.fm-ul li div.fm-li-content div.fm-li-title span.fm-li-title-text{border:1px solid #bdbdbd;border-radius:3px;padding:3px calc(var(--fm-margin-li) / 2);background-color:#5d5d5d;color:var(--fm-theme-content-color);font-size:15px;color:#fff;position:relative}ul.fm-ul ul.fm-ul-component div.fm-li-title.fm-title-right span.fm-li-title-text:after{position:absolute;content:'';right:-27px;bottom:-1px;border:14px solid transparent;border-left-color:#5d5d5d;border-radius:5px}ul.fm-ul ul.fm-ul-component div.fm-li-title.fm-title-left span.fm-li-title-text:before{position:absolute;content:'';left:-27px;bottom:-1px;border:14px solid transparent;border-right-color:#5d5d5d;border-radius:5px}ul.fm-ul-component li.fm-li:hover div.fm-li-title{visibility:visible;opacity:.85}","link":"/float/css/float-module.min.css"},{"title":"","text":"(function(b,a){var c=function(l){if(!(this instanceof c)){return new c(l)}var n=this;var i={radius:\"50%\",theme_color:\"#56b4f8\",theme_content_color:\"#fff\",font_size:\"18px\",width_height:\"60px\",margin_screen_x:\"30px\",margin_screen_y:\"30px\",margin_li:\"10px\",animation:\"slide-in\",position:\"right-bottom\",icon_css_path:\"\",btn_config:[{}]};var g=i;var r=a.querySelector(\":root\");var j;var o;n._init=function(){q();if(!s()){return}r.style.setProperty(\"--fm-margin-li\",g.margin_li);r.style.setProperty(\"--fm-width-height\",g.width_height);r.style.setProperty(\"--fm-theme-color\",g.theme_color);r.style.setProperty(\"--fm-theme-content-color\",g.theme_content_color);r.style.setProperty(\"--fm-font-size\",g.font_size);r.style.setProperty(\"--fm-border-radius\",g.radius);r.style.setProperty(\"--fm-margin-screen-x\",g.margin_screen_x);r.style.setProperty(\"--fm-margin-screen-y\",g.margin_screen_y);r.style.setProperty(\"\",g.width_height);h();j=a.getElementsByClassName(\"fm-ul\")[0];o=a.getElementsByClassName(\"fm-ul-component\")[0].children;j.classList.add(\"fm-\"+g.animation);p(g.position);k();setTimeout(function(){j.style.opacity=1},251)};n._show=function(){j.style.visibility=\"visible\";j.style.opacity=1};n._hide=function(){j.style.opacity=0;setTimeout(function(){j.style.visibility=\"hidden\"},1000)};function h(){if(typeof g.btn_config==\"object\"&&g.btn_config!=null){var u=g.btn_config;var w='';var x='';for(var t=1;t","link":"/float/js/float-module.min.js"},{"title":"","text":"/*! * Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome * License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License) */@font-face{font-family:'FontAwesome';src:url('../fonts/fontawesome-webfont.eot?v=4.7.0');src:url('../fonts/fontawesome-webfont.eot?#iefix&v=4.7.0') format('embedded-opentype'),url('../fonts/fontawesome-webfont.woff2?v=4.7.0') format('woff2'),url('../fonts/fontawesome-webfont.woff?v=4.7.0') format('woff'),url('../fonts/fontawesome-webfont.ttf?v=4.7.0') format('truetype'),url('../fonts/fontawesome-webfont.svg?v=4.7.0#fontawesomeregular') format('svg');font-weight:normal;font-style:normal}.fa{display:inline-block;font:normal normal normal 14px/1 FontAwesome;font-size:inherit;text-rendering:auto;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale} .fa-lg{font-size:1.33333333em;line-height:.75em;vertical-align:-15%} .fa-2x{font-size:2em} .fa-3x{font-size:3em} .fa-4x{font-size:4em} .fa-5x{font-size:5em} .fa-fw{width:1.28571429em;text-align:center} .fa-ul{padding-left:0;margin-left:2.14285714em;list-style-type:none} .fa-ul>li{position:relative} .fa-li{position:absolute;left:-2.14285714em;width:2.14285714em;top:.14285714em;text-align:center} .fa-li.fa-lg{left:-1.85714286em} .fa-border{padding:.2em .25em .15em;border:solid .08em #eee;border-radius:.1em} .fa-pull-left{float:left} .fa-pull-right{float:right} .fa.fa-pull-left{margin-right:.3em} .fa.fa-pull-right{margin-left:.3em} .pull-right{float:right} .pull-left{float:left} .fa.pull-left{margin-right:.3em} .fa.pull-right{margin-left:.3em} .fa-spin{-webkit-animation:fa-spin 2s infinite linear;animation:fa-spin 2s infinite linear} .fa-pulse{-webkit-animation:fa-spin 1s infinite steps(8);animation:fa-spin 1s infinite steps(8)} @-webkit-keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}} @keyframes fa-spin{0%{-webkit-transform:rotate(0deg);transform:rotate(0deg)} 100%{-webkit-transform:rotate(359deg);transform:rotate(359deg)}} .fa-rotate-90{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=1)\";-webkit-transform:rotate(90deg);-ms-transform:rotate(90deg);transform:rotate(90deg)} .fa-rotate-180{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2)\";-webkit-transform:rotate(180deg);-ms-transform:rotate(180deg);transform:rotate(180deg)} .fa-rotate-270{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=3)\";-webkit-transform:rotate(270deg);-ms-transform:rotate(270deg);transform:rotate(270deg)} .fa-flip-horizontal{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)\";-webkit-transform:scale(-1, 1);-ms-transform:scale(-1, 1);transform:scale(-1, 1)} .fa-flip-vertical{-ms-filter:\"progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)\";-webkit-transform:scale(1, -1);-ms-transform:scale(1, -1);transform:scale(1, -1)} :root .fa-rotate-90,:root .fa-rotate-180,:root .fa-rotate-270,:root .fa-flip-horizontal,:root .fa-flip-vertical{filter:none} .fa-stack{position:relative;display:inline-block;width:2em;height:2em;line-height:2em;vertical-align:middle} .fa-stack-1x,.fa-stack-2x{position:absolute;left:0;width:100%;text-align:center} .fa-stack-1x{line-height:inherit} .fa-stack-2x{font-size:2em} .fa-inverse{color:#fff} .fa-glass:before{content:\"\\f000\"} .fa-music:before{content:\"\\f001\"} .fa-search:before{content:\"\\f002\"} .fa-envelope-o:before{content:\"\\f003\"} .fa-heart:before{content:\"\\f004\"} .fa-star:before{content:\"\\f005\"} .fa-star-o:before{content:\"\\f006\"} .fa-user:before{content:\"\\f007\"} .fa-film:before{content:\"\\f008\"} .fa-th-large:before{content:\"\\f009\"} .fa-th:before{content:\"\\f00a\"} .fa-th-list:before{content:\"\\f00b\"} .fa-check:before{content:\"\\f00c\"} .fa-remove:before,.fa-close:before,.fa-times:before{content:\"\\f00d\"} .fa-search-plus:before{content:\"\\f00e\"} .fa-search-minus:before{content:\"\\f010\"} .fa-power-off:before{content:\"\\f011\"} .fa-signal:before{content:\"\\f012\"} .fa-gear:before,.fa-cog:before{content:\"\\f013\"} .fa-trash-o:before{content:\"\\f014\"} .fa-home:before{content:\"\\f015\"} .fa-file-o:before{content:\"\\f016\"} .fa-clock-o:before{content:\"\\f017\"} .fa-road:before{content:\"\\f018\"} .fa-download:before{content:\"\\f019\"} .fa-arrow-circle-o-down:before{content:\"\\f01a\"} .fa-arrow-circle-o-up:before{content:\"\\f01b\"} .fa-inbox:before{content:\"\\f01c\"} .fa-play-circle-o:before{content:\"\\f01d\"} .fa-rotate-right:before,.fa-repeat:before{content:\"\\f01e\"} .fa-refresh:before{content:\"\\f021\"} .fa-list-alt:before{content:\"\\f022\"} .fa-lock:before{content:\"\\f023\"} .fa-flag:before{content:\"\\f024\"} .fa-headphones:before{content:\"\\f025\"} .fa-volume-off:before{content:\"\\f026\"} .fa-volume-down:before{content:\"\\f027\"} .fa-volume-up:before{content:\"\\f028\"} .fa-qrcode:before{content:\"\\f029\"} .fa-barcode:before{content:\"\\f02a\"} .fa-tag:before{content:\"\\f02b\"} .fa-tags:before{content:\"\\f02c\"} .fa-book:before{content:\"\\f02d\"} .fa-bookmark:before{content:\"\\f02e\"} .fa-print:before{content:\"\\f02f\"} .fa-camera:before{content:\"\\f030\"} .fa-font:before{content:\"\\f031\"} .fa-bold:before{content:\"\\f032\"} .fa-italic:before{content:\"\\f033\"} .fa-text-height:before{content:\"\\f034\"} .fa-text-width:before{content:\"\\f035\"} .fa-align-left:before{content:\"\\f036\"} .fa-align-center:before{content:\"\\f037\"} .fa-align-right:before{content:\"\\f038\"} .fa-align-justify:before{content:\"\\f039\"} .fa-list:before{content:\"\\f03a\"} .fa-dedent:before,.fa-outdent:before{content:\"\\f03b\"} .fa-indent:before{content:\"\\f03c\"} .fa-video-camera:before{content:\"\\f03d\"} .fa-photo:before,.fa-image:before,.fa-picture-o:before{content:\"\\f03e\"} .fa-pencil:before{content:\"\\f040\"} .fa-map-marker:before{content:\"\\f041\"} .fa-adjust:before{content:\"\\f042\"} .fa-tint:before{content:\"\\f043\"} .fa-edit:before,.fa-pencil-square-o:before{content:\"\\f044\"} .fa-share-square-o:before{content:\"\\f045\"} .fa-check-square-o:before{content:\"\\f046\"} .fa-arrows:before{content:\"\\f047\"} .fa-step-backward:before{content:\"\\f048\"} .fa-fast-backward:before{content:\"\\f049\"} .fa-backward:before{content:\"\\f04a\"} .fa-play:before{content:\"\\f04b\"} .fa-pause:before{content:\"\\f04c\"} .fa-stop:before{content:\"\\f04d\"} .fa-forward:before{content:\"\\f04e\"} .fa-fast-forward:before{content:\"\\f050\"} .fa-step-forward:before{content:\"\\f051\"} .fa-eject:before{content:\"\\f052\"} .fa-chevron-left:before{content:\"\\f053\"} .fa-chevron-right:before{content:\"\\f054\"} .fa-plus-circle:before{content:\"\\f055\"} .fa-minus-circle:before{content:\"\\f056\"} .fa-times-circle:before{content:\"\\f057\"} .fa-check-circle:before{content:\"\\f058\"} .fa-question-circle:before{content:\"\\f059\"} .fa-info-circle:before{content:\"\\f05a\"} .fa-crosshairs:before{content:\"\\f05b\"} .fa-times-circle-o:before{content:\"\\f05c\"} .fa-check-circle-o:before{content:\"\\f05d\"} .fa-ban:before{content:\"\\f05e\"} .fa-arrow-left:before{content:\"\\f060\"} .fa-arrow-right:before{content:\"\\f061\"} .fa-arrow-up:before{content:\"\\f062\"} .fa-arrow-down:before{content:\"\\f063\"} .fa-mail-forward:before,.fa-share:before{content:\"\\f064\"} .fa-expand:before{content:\"\\f065\"} .fa-compress:before{content:\"\\f066\"} .fa-plus:before{content:\"\\f067\"} .fa-minus:before{content:\"\\f068\"} .fa-asterisk:before{content:\"\\f069\"} .fa-exclamation-circle:before{content:\"\\f06a\"} .fa-gift:before{content:\"\\f06b\"} .fa-leaf:before{content:\"\\f06c\"} .fa-fire:before{content:\"\\f06d\"} .fa-eye:before{content:\"\\f06e\"} .fa-eye-slash:before{content:\"\\f070\"} .fa-warning:before,.fa-exclamation-triangle:before{content:\"\\f071\"} .fa-plane:before{content:\"\\f072\"} .fa-calendar:before{content:\"\\f073\"} .fa-random:before{content:\"\\f074\"} .fa-comment:before{content:\"\\f075\"} .fa-magnet:before{content:\"\\f076\"} .fa-chevron-up:before{content:\"\\f077\"} .fa-chevron-down:before{content:\"\\f078\"} .fa-retweet:before{content:\"\\f079\"} .fa-shopping-cart:before{content:\"\\f07a\"} .fa-folder:before{content:\"\\f07b\"} .fa-folder-open:before{content:\"\\f07c\"} .fa-arrows-v:before{content:\"\\f07d\"} .fa-arrows-h:before{content:\"\\f07e\"} .fa-bar-chart-o:before,.fa-bar-chart:before{content:\"\\f080\"} .fa-twitter-square:before{content:\"\\f081\"} .fa-facebook-square:before{content:\"\\f082\"} .fa-camera-retro:before{content:\"\\f083\"} .fa-key:before{content:\"\\f084\"} .fa-gears:before,.fa-cogs:before{content:\"\\f085\"} .fa-comments:before{content:\"\\f086\"} .fa-thumbs-o-up:before{content:\"\\f087\"} .fa-thumbs-o-down:before{content:\"\\f088\"} .fa-star-half:before{content:\"\\f089\"} .fa-heart-o:before{content:\"\\f08a\"} .fa-sign-out:before{content:\"\\f08b\"} .fa-linkedin-square:before{content:\"\\f08c\"} .fa-thumb-tack:before{content:\"\\f08d\"} .fa-external-link:before{content:\"\\f08e\"} .fa-sign-in:before{content:\"\\f090\"} .fa-trophy:before{content:\"\\f091\"} .fa-github-square:before{content:\"\\f092\"} .fa-upload:before{content:\"\\f093\"} .fa-lemon-o:before{content:\"\\f094\"} .fa-phone:before{content:\"\\f095\"} .fa-square-o:before{content:\"\\f096\"} .fa-bookmark-o:before{content:\"\\f097\"} .fa-phone-square:before{content:\"\\f098\"} .fa-twitter:before{content:\"\\f099\"} .fa-facebook-f:before,.fa-facebook:before{content:\"\\f09a\"} .fa-github:before{content:\"\\f09b\"} .fa-unlock:before{content:\"\\f09c\"} .fa-credit-card:before{content:\"\\f09d\"} .fa-feed:before,.fa-rss:before{content:\"\\f09e\"} .fa-hdd-o:before{content:\"\\f0a0\"} .fa-bullhorn:before{content:\"\\f0a1\"} .fa-bell:before{content:\"\\f0f3\"} .fa-certificate:before{content:\"\\f0a3\"} .fa-hand-o-right:before{content:\"\\f0a4\"} .fa-hand-o-left:before{content:\"\\f0a5\"} .fa-hand-o-up:before{content:\"\\f0a6\"} .fa-hand-o-down:before{content:\"\\f0a7\"} .fa-arrow-circle-left:before{content:\"\\f0a8\"} .fa-arrow-circle-right:before{content:\"\\f0a9\"} .fa-arrow-circle-up:before{content:\"\\f0aa\"} .fa-arrow-circle-down:before{content:\"\\f0ab\"} .fa-globe:before{content:\"\\f0ac\"} .fa-wrench:before{content:\"\\f0ad\"} .fa-tasks:before{content:\"\\f0ae\"} .fa-filter:before{content:\"\\f0b0\"} .fa-briefcase:before{content:\"\\f0b1\"} .fa-arrows-alt:before{content:\"\\f0b2\"} .fa-group:before,.fa-users:before{content:\"\\f0c0\"} .fa-chain:before,.fa-link:before{content:\"\\f0c1\"} .fa-cloud:before{content:\"\\f0c2\"} .fa-flask:before{content:\"\\f0c3\"} .fa-cut:before,.fa-scissors:before{content:\"\\f0c4\"} .fa-copy:before,.fa-files-o:before{content:\"\\f0c5\"} .fa-paperclip:before{content:\"\\f0c6\"} .fa-save:before,.fa-floppy-o:before{content:\"\\f0c7\"} .fa-square:before{content:\"\\f0c8\"} .fa-navicon:before,.fa-reorder:before,.fa-bars:before{content:\"\\f0c9\"} .fa-list-ul:before{content:\"\\f0ca\"} .fa-list-ol:before{content:\"\\f0cb\"} .fa-strikethrough:before{content:\"\\f0cc\"} .fa-underline:before{content:\"\\f0cd\"} .fa-table:before{content:\"\\f0ce\"} .fa-magic:before{content:\"\\f0d0\"} .fa-truck:before{content:\"\\f0d1\"} .fa-pinterest:before{content:\"\\f0d2\"} .fa-pinterest-square:before{content:\"\\f0d3\"} .fa-google-plus-square:before{content:\"\\f0d4\"} .fa-google-plus:before{content:\"\\f0d5\"} .fa-money:before{content:\"\\f0d6\"} .fa-caret-down:before{content:\"\\f0d7\"} .fa-caret-up:before{content:\"\\f0d8\"} .fa-caret-left:before{content:\"\\f0d9\"} .fa-caret-right:before{content:\"\\f0da\"} .fa-columns:before{content:\"\\f0db\"} .fa-unsorted:before,.fa-sort:before{content:\"\\f0dc\"} .fa-sort-down:before,.fa-sort-desc:before{content:\"\\f0dd\"} .fa-sort-up:before,.fa-sort-asc:before{content:\"\\f0de\"} .fa-envelope:before{content:\"\\f0e0\"} .fa-linkedin:before{content:\"\\f0e1\"} .fa-rotate-left:before,.fa-undo:before{content:\"\\f0e2\"} .fa-legal:before,.fa-gavel:before{content:\"\\f0e3\"} .fa-dashboard:before,.fa-tachometer:before{content:\"\\f0e4\"} .fa-comment-o:before{content:\"\\f0e5\"} .fa-comments-o:before{content:\"\\f0e6\"} .fa-flash:before,.fa-bolt:before{content:\"\\f0e7\"} .fa-sitemap:before{content:\"\\f0e8\"} .fa-umbrella:before{content:\"\\f0e9\"} .fa-paste:before,.fa-clipboard:before{content:\"\\f0ea\"} .fa-lightbulb-o:before{content:\"\\f0eb\"} .fa-exchange:before{content:\"\\f0ec\"} .fa-cloud-download:before{content:\"\\f0ed\"} .fa-cloud-upload:before{content:\"\\f0ee\"} .fa-user-md:before{content:\"\\f0f0\"} .fa-stethoscope:before{content:\"\\f0f1\"} .fa-suitcase:before{content:\"\\f0f2\"} .fa-bell-o:before{content:\"\\f0a2\"} .fa-coffee:before{content:\"\\f0f4\"} .fa-cutlery:before{content:\"\\f0f5\"} .fa-file-text-o:before{content:\"\\f0f6\"} .fa-building-o:before{content:\"\\f0f7\"} .fa-hospital-o:before{content:\"\\f0f8\"} .fa-ambulance:before{content:\"\\f0f9\"} .fa-medkit:before{content:\"\\f0fa\"} .fa-fighter-jet:before{content:\"\\f0fb\"} .fa-beer:before{content:\"\\f0fc\"} .fa-h-square:before{content:\"\\f0fd\"} .fa-plus-square:before{content:\"\\f0fe\"} .fa-angle-double-left:before{content:\"\\f100\"} .fa-angle-double-right:before{content:\"\\f101\"} .fa-angle-double-up:before{content:\"\\f102\"} .fa-angle-double-down:before{content:\"\\f103\"} .fa-angle-left:before{content:\"\\f104\"} .fa-angle-right:before{content:\"\\f105\"} .fa-angle-up:before{content:\"\\f106\"} .fa-angle-down:before{content:\"\\f107\"} .fa-desktop:before{content:\"\\f108\"} .fa-laptop:before{content:\"\\f109\"} .fa-tablet:before{content:\"\\f10a\"} .fa-mobile-phone:before,.fa-mobile:before{content:\"\\f10b\"} .fa-circle-o:before{content:\"\\f10c\"} .fa-quote-left:before{content:\"\\f10d\"} .fa-quote-right:before{content:\"\\f10e\"} .fa-spinner:before{content:\"\\f110\"} .fa-circle:before{content:\"\\f111\"} .fa-mail-reply:before,.fa-reply:before{content:\"\\f112\"} .fa-github-alt:before{content:\"\\f113\"} .fa-folder-o:before{content:\"\\f114\"} .fa-folder-open-o:before{content:\"\\f115\"} .fa-smile-o:before{content:\"\\f118\"} .fa-frown-o:before{content:\"\\f119\"} .fa-meh-o:before{content:\"\\f11a\"} .fa-gamepad:before{content:\"\\f11b\"} .fa-keyboard-o:before{content:\"\\f11c\"} .fa-flag-o:before{content:\"\\f11d\"} .fa-flag-checkered:before{content:\"\\f11e\"} .fa-terminal:before{content:\"\\f120\"} .fa-code:before{content:\"\\f121\"} .fa-mail-reply-all:before,.fa-reply-all:before{content:\"\\f122\"} .fa-star-half-empty:before,.fa-star-half-full:before,.fa-star-half-o:before{content:\"\\f123\"} .fa-location-arrow:before{content:\"\\f124\"} .fa-crop:before{content:\"\\f125\"} .fa-code-fork:before{content:\"\\f126\"} .fa-unlink:before,.fa-chain-broken:before{content:\"\\f127\"} .fa-question:before{content:\"\\f128\"} .fa-info:before{content:\"\\f129\"} .fa-exclamation:before{content:\"\\f12a\"} .fa-superscript:before{content:\"\\f12b\"} .fa-subscript:before{content:\"\\f12c\"} .fa-eraser:before{content:\"\\f12d\"} .fa-puzzle-piece:before{content:\"\\f12e\"} .fa-microphone:before{content:\"\\f130\"} .fa-microphone-slash:before{content:\"\\f131\"} .fa-shield:before{content:\"\\f132\"} .fa-calendar-o:before{content:\"\\f133\"} .fa-fire-extinguisher:before{content:\"\\f134\"} .fa-rocket:before{content:\"\\f135\"} .fa-maxcdn:before{content:\"\\f136\"} .fa-chevron-circle-left:before{content:\"\\f137\"} .fa-chevron-circle-right:before{content:\"\\f138\"} .fa-chevron-circle-up:before{content:\"\\f139\"} .fa-chevron-circle-down:before{content:\"\\f13a\"} .fa-html5:before{content:\"\\f13b\"} .fa-css3:before{content:\"\\f13c\"} .fa-anchor:before{content:\"\\f13d\"} .fa-unlock-alt:before{content:\"\\f13e\"} .fa-bullseye:before{content:\"\\f140\"} .fa-ellipsis-h:before{content:\"\\f141\"} .fa-ellipsis-v:before{content:\"\\f142\"} .fa-rss-square:before{content:\"\\f143\"} .fa-play-circle:before{content:\"\\f144\"} .fa-ticket:before{content:\"\\f145\"} .fa-minus-square:before{content:\"\\f146\"} .fa-minus-square-o:before{content:\"\\f147\"} .fa-level-up:before{content:\"\\f148\"} .fa-level-down:before{content:\"\\f149\"} .fa-check-square:before{content:\"\\f14a\"} .fa-pencil-square:before{content:\"\\f14b\"} .fa-external-link-square:before{content:\"\\f14c\"} .fa-share-square:before{content:\"\\f14d\"} .fa-compass:before{content:\"\\f14e\"} .fa-toggle-down:before,.fa-caret-square-o-down:before{content:\"\\f150\"} .fa-toggle-up:before,.fa-caret-square-o-up:before{content:\"\\f151\"} .fa-toggle-right:before,.fa-caret-square-o-right:before{content:\"\\f152\"} .fa-euro:before,.fa-eur:before{content:\"\\f153\"} .fa-gbp:before{content:\"\\f154\"} .fa-dollar:before,.fa-usd:before{content:\"\\f155\"} .fa-rupee:before,.fa-inr:before{content:\"\\f156\"} .fa-cny:before,.fa-rmb:before,.fa-yen:before,.fa-jpy:before{content:\"\\f157\"} .fa-ruble:before,.fa-rouble:before,.fa-rub:before{content:\"\\f158\"} .fa-won:before,.fa-krw:before{content:\"\\f159\"} .fa-bitcoin:before,.fa-btc:before{content:\"\\f15a\"} .fa-file:before{content:\"\\f15b\"} .fa-file-text:before{content:\"\\f15c\"} .fa-sort-alpha-asc:before{content:\"\\f15d\"} .fa-sort-alpha-desc:before{content:\"\\f15e\"} .fa-sort-amount-asc:before{content:\"\\f160\"} .fa-sort-amount-desc:before{content:\"\\f161\"} .fa-sort-numeric-asc:before{content:\"\\f162\"} .fa-sort-numeric-desc:before{content:\"\\f163\"} .fa-thumbs-up:before{content:\"\\f164\"} .fa-thumbs-down:before{content:\"\\f165\"} .fa-youtube-square:before{content:\"\\f166\"} .fa-youtube:before{content:\"\\f167\"} .fa-xing:before{content:\"\\f168\"} .fa-xing-square:before{content:\"\\f169\"} .fa-youtube-play:before{content:\"\\f16a\"} .fa-dropbox:before{content:\"\\f16b\"} .fa-stack-overflow:before{content:\"\\f16c\"} .fa-instagram:before{content:\"\\f16d\"} .fa-flickr:before{content:\"\\f16e\"} .fa-adn:before{content:\"\\f170\"} .fa-bitbucket:before{content:\"\\f171\"} .fa-bitbucket-square:before{content:\"\\f172\"} .fa-tumblr:before{content:\"\\f173\"} .fa-tumblr-square:before{content:\"\\f174\"} .fa-long-arrow-down:before{content:\"\\f175\"} .fa-long-arrow-up:before{content:\"\\f176\"} .fa-long-arrow-left:before{content:\"\\f177\"} .fa-long-arrow-right:before{content:\"\\f178\"} .fa-apple:before{content:\"\\f179\"} .fa-windows:before{content:\"\\f17a\"} .fa-android:before{content:\"\\f17b\"} .fa-linux:before{content:\"\\f17c\"} .fa-dribbble:before{content:\"\\f17d\"} .fa-skype:before{content:\"\\f17e\"} .fa-foursquare:before{content:\"\\f180\"} .fa-trello:before{content:\"\\f181\"} .fa-female:before{content:\"\\f182\"} .fa-male:before{content:\"\\f183\"} .fa-gittip:before,.fa-gratipay:before{content:\"\\f184\"} .fa-sun-o:before{content:\"\\f185\"} .fa-moon-o:before{content:\"\\f186\"} .fa-archive:before{content:\"\\f187\"} .fa-bug:before{content:\"\\f188\"} .fa-vk:before{content:\"\\f189\"} .fa-weibo:before{content:\"\\f18a\"} .fa-renren:before{content:\"\\f18b\"} .fa-pagelines:before{content:\"\\f18c\"} .fa-stack-exchange:before{content:\"\\f18d\"} .fa-arrow-circle-o-right:before{content:\"\\f18e\"} .fa-arrow-circle-o-left:before{content:\"\\f190\"} .fa-toggle-left:before,.fa-caret-square-o-left:before{content:\"\\f191\"} .fa-dot-circle-o:before{content:\"\\f192\"} .fa-wheelchair:before{content:\"\\f193\"} .fa-vimeo-square:before{content:\"\\f194\"} .fa-turkish-lira:before,.fa-try:before{content:\"\\f195\"} .fa-plus-square-o:before{content:\"\\f196\"} .fa-space-shuttle:before{content:\"\\f197\"} .fa-slack:before{content:\"\\f198\"} .fa-envelope-square:before{content:\"\\f199\"} .fa-wordpress:before{content:\"\\f19a\"} .fa-openid:before{content:\"\\f19b\"} .fa-institution:before,.fa-bank:before,.fa-university:before{content:\"\\f19c\"} .fa-mortar-board:before,.fa-graduation-cap:before{content:\"\\f19d\"} .fa-yahoo:before{content:\"\\f19e\"} .fa-google:before{content:\"\\f1a0\"} .fa-reddit:before{content:\"\\f1a1\"} .fa-reddit-square:before{content:\"\\f1a2\"} .fa-stumbleupon-circle:before{content:\"\\f1a3\"} .fa-stumbleupon:before{content:\"\\f1a4\"} .fa-delicious:before{content:\"\\f1a5\"} .fa-digg:before{content:\"\\f1a6\"} .fa-pied-piper-pp:before{content:\"\\f1a7\"} .fa-pied-piper-alt:before{content:\"\\f1a8\"} .fa-drupal:before{content:\"\\f1a9\"} .fa-joomla:before{content:\"\\f1aa\"} .fa-language:before{content:\"\\f1ab\"} .fa-fax:before{content:\"\\f1ac\"} .fa-building:before{content:\"\\f1ad\"} .fa-child:before{content:\"\\f1ae\"} .fa-paw:before{content:\"\\f1b0\"} .fa-spoon:before{content:\"\\f1b1\"} .fa-cube:before{content:\"\\f1b2\"} .fa-cubes:before{content:\"\\f1b3\"} .fa-behance:before{content:\"\\f1b4\"} .fa-behance-square:before{content:\"\\f1b5\"} .fa-steam:before{content:\"\\f1b6\"} .fa-steam-square:before{content:\"\\f1b7\"} .fa-recycle:before{content:\"\\f1b8\"} .fa-automobile:before,.fa-car:before{content:\"\\f1b9\"} .fa-cab:before,.fa-taxi:before{content:\"\\f1ba\"} .fa-tree:before{content:\"\\f1bb\"} .fa-spotify:before{content:\"\\f1bc\"} .fa-deviantart:before{content:\"\\f1bd\"} .fa-soundcloud:before{content:\"\\f1be\"} .fa-database:before{content:\"\\f1c0\"} .fa-file-pdf-o:before{content:\"\\f1c1\"} .fa-file-word-o:before{content:\"\\f1c2\"} .fa-file-excel-o:before{content:\"\\f1c3\"} .fa-file-powerpoint-o:before{content:\"\\f1c4\"} .fa-file-photo-o:before,.fa-file-picture-o:before,.fa-file-image-o:before{content:\"\\f1c5\"} .fa-file-zip-o:before,.fa-file-archive-o:before{content:\"\\f1c6\"} .fa-file-sound-o:before,.fa-file-audio-o:before{content:\"\\f1c7\"} .fa-file-movie-o:before,.fa-file-video-o:before{content:\"\\f1c8\"} .fa-file-code-o:before{content:\"\\f1c9\"} .fa-vine:before{content:\"\\f1ca\"} .fa-codepen:before{content:\"\\f1cb\"} .fa-jsfiddle:before{content:\"\\f1cc\"} .fa-life-bouy:before,.fa-life-buoy:before,.fa-life-saver:before,.fa-support:before,.fa-life-ring:before{content:\"\\f1cd\"} .fa-circle-o-notch:before{content:\"\\f1ce\"} .fa-ra:before,.fa-resistance:before,.fa-rebel:before{content:\"\\f1d0\"} .fa-ge:before,.fa-empire:before{content:\"\\f1d1\"} .fa-git-square:before{content:\"\\f1d2\"} .fa-git:before{content:\"\\f1d3\"} .fa-y-combinator-square:before,.fa-yc-square:before,.fa-hacker-news:before{content:\"\\f1d4\"} .fa-tencent-weibo:before{content:\"\\f1d5\"} .fa-qq:before{content:\"\\f1d6\"} .fa-wechat:before,.fa-weixin:before{content:\"\\f1d7\"} .fa-send:before,.fa-paper-plane:before{content:\"\\f1d8\"} .fa-send-o:before,.fa-paper-plane-o:before{content:\"\\f1d9\"} .fa-history:before{content:\"\\f1da\"} .fa-circle-thin:before{content:\"\\f1db\"} .fa-header:before{content:\"\\f1dc\"} .fa-paragraph:before{content:\"\\f1dd\"} .fa-sliders:before{content:\"\\f1de\"} .fa-share-alt:before{content:\"\\f1e0\"} .fa-share-alt-square:before{content:\"\\f1e1\"} .fa-bomb:before{content:\"\\f1e2\"} .fa-soccer-ball-o:before,.fa-futbol-o:before{content:\"\\f1e3\"} .fa-tty:before{content:\"\\f1e4\"} .fa-binoculars:before{content:\"\\f1e5\"} .fa-plug:before{content:\"\\f1e6\"} .fa-slideshare:before{content:\"\\f1e7\"} .fa-twitch:before{content:\"\\f1e8\"} .fa-yelp:before{content:\"\\f1e9\"} .fa-newspaper-o:before{content:\"\\f1ea\"} .fa-wifi:before{content:\"\\f1eb\"} .fa-calculator:before{content:\"\\f1ec\"} .fa-paypal:before{content:\"\\f1ed\"} .fa-google-wallet:before{content:\"\\f1ee\"} .fa-cc-visa:before{content:\"\\f1f0\"} .fa-cc-mastercard:before{content:\"\\f1f1\"} .fa-cc-discover:before{content:\"\\f1f2\"} .fa-cc-amex:before{content:\"\\f1f3\"} .fa-cc-paypal:before{content:\"\\f1f4\"} .fa-cc-stripe:before{content:\"\\f1f5\"} .fa-bell-slash:before{content:\"\\f1f6\"} .fa-bell-slash-o:before{content:\"\\f1f7\"} .fa-trash:before{content:\"\\f1f8\"} .fa-copyright:before{content:\"\\f1f9\"} .fa-at:before{content:\"\\f1fa\"} .fa-eyedropper:before{content:\"\\f1fb\"} .fa-paint-brush:before{content:\"\\f1fc\"} .fa-birthday-cake:before{content:\"\\f1fd\"} .fa-area-chart:before{content:\"\\f1fe\"} .fa-pie-chart:before{content:\"\\f200\"} .fa-line-chart:before{content:\"\\f201\"} .fa-lastfm:before{content:\"\\f202\"} .fa-lastfm-square:before{content:\"\\f203\"} .fa-toggle-off:before{content:\"\\f204\"} .fa-toggle-on:before{content:\"\\f205\"} .fa-bicycle:before{content:\"\\f206\"} .fa-bus:before{content:\"\\f207\"} .fa-ioxhost:before{content:\"\\f208\"} .fa-angellist:before{content:\"\\f209\"} .fa-cc:before{content:\"\\f20a\"} .fa-shekel:before,.fa-sheqel:before,.fa-ils:before{content:\"\\f20b\"} .fa-meanpath:before{content:\"\\f20c\"} .fa-buysellads:before{content:\"\\f20d\"} .fa-connectdevelop:before{content:\"\\f20e\"} .fa-dashcube:before{content:\"\\f210\"} .fa-forumbee:before{content:\"\\f211\"} .fa-leanpub:before{content:\"\\f212\"} .fa-sellsy:before{content:\"\\f213\"} .fa-shirtsinbulk:before{content:\"\\f214\"} .fa-simplybuilt:before{content:\"\\f215\"} .fa-skyatlas:before{content:\"\\f216\"} .fa-cart-plus:before{content:\"\\f217\"} .fa-cart-arrow-down:before{content:\"\\f218\"} .fa-diamond:before{content:\"\\f219\"} .fa-ship:before{content:\"\\f21a\"} .fa-user-secret:before{content:\"\\f21b\"} .fa-motorcycle:before{content:\"\\f21c\"} .fa-street-view:before{content:\"\\f21d\"} .fa-heartbeat:before{content:\"\\f21e\"} .fa-venus:before{content:\"\\f221\"} .fa-mars:before{content:\"\\f222\"} .fa-mercury:before{content:\"\\f223\"} .fa-intersex:before,.fa-transgender:before{content:\"\\f224\"} .fa-transgender-alt:before{content:\"\\f225\"} .fa-venus-double:before{content:\"\\f226\"} .fa-mars-double:before{content:\"\\f227\"} .fa-venus-mars:before{content:\"\\f228\"} .fa-mars-stroke:before{content:\"\\f229\"} .fa-mars-stroke-v:before{content:\"\\f22a\"} .fa-mars-stroke-h:before{content:\"\\f22b\"} .fa-neuter:before{content:\"\\f22c\"} .fa-genderless:before{content:\"\\f22d\"} .fa-facebook-official:before{content:\"\\f230\"} .fa-pinterest-p:before{content:\"\\f231\"} .fa-whatsapp:before{content:\"\\f232\"} .fa-server:before{content:\"\\f233\"} .fa-user-plus:before{content:\"\\f234\"} .fa-user-times:before{content:\"\\f235\"} .fa-hotel:before,.fa-bed:before{content:\"\\f236\"} .fa-viacoin:before{content:\"\\f237\"} .fa-train:before{content:\"\\f238\"} .fa-subway:before{content:\"\\f239\"} .fa-medium:before{content:\"\\f23a\"} .fa-yc:before,.fa-y-combinator:before{content:\"\\f23b\"} .fa-optin-monster:before{content:\"\\f23c\"} .fa-opencart:before{content:\"\\f23d\"} .fa-expeditedssl:before{content:\"\\f23e\"} .fa-battery-4:before,.fa-battery:before,.fa-battery-full:before{content:\"\\f240\"} .fa-battery-3:before,.fa-battery-three-quarters:before{content:\"\\f241\"} .fa-battery-2:before,.fa-battery-half:before{content:\"\\f242\"} .fa-battery-1:before,.fa-battery-quarter:before{content:\"\\f243\"} .fa-battery-0:before,.fa-battery-empty:before{content:\"\\f244\"} .fa-mouse-pointer:before{content:\"\\f245\"} .fa-i-cursor:before{content:\"\\f246\"} .fa-object-group:before{content:\"\\f247\"} .fa-object-ungroup:before{content:\"\\f248\"} .fa-sticky-note:before{content:\"\\f249\"} .fa-sticky-note-o:before{content:\"\\f24a\"} .fa-cc-jcb:before{content:\"\\f24b\"} .fa-cc-diners-club:before{content:\"\\f24c\"} .fa-clone:before{content:\"\\f24d\"} .fa-balance-scale:before{content:\"\\f24e\"} .fa-hourglass-o:before{content:\"\\f250\"} .fa-hourglass-1:before,.fa-hourglass-start:before{content:\"\\f251\"} .fa-hourglass-2:before,.fa-hourglass-half:before{content:\"\\f252\"} .fa-hourglass-3:before,.fa-hourglass-end:before{content:\"\\f253\"} .fa-hourglass:before{content:\"\\f254\"} .fa-hand-grab-o:before,.fa-hand-rock-o:before{content:\"\\f255\"} .fa-hand-stop-o:before,.fa-hand-paper-o:before{content:\"\\f256\"} .fa-hand-scissors-o:before{content:\"\\f257\"} .fa-hand-lizard-o:before{content:\"\\f258\"} .fa-hand-spock-o:before{content:\"\\f259\"} .fa-hand-pointer-o:before{content:\"\\f25a\"} .fa-hand-peace-o:before{content:\"\\f25b\"} .fa-trademark:before{content:\"\\f25c\"} .fa-registered:before{content:\"\\f25d\"} .fa-creative-commons:before{content:\"\\f25e\"} .fa-gg:before{content:\"\\f260\"} .fa-gg-circle:before{content:\"\\f261\"} .fa-tripadvisor:before{content:\"\\f262\"} .fa-odnoklassniki:before{content:\"\\f263\"} .fa-odnoklassniki-square:before{content:\"\\f264\"} .fa-get-pocket:before{content:\"\\f265\"} .fa-wikipedia-w:before{content:\"\\f266\"} .fa-safari:before{content:\"\\f267\"} .fa-chrome:before{content:\"\\f268\"} .fa-firefox:before{content:\"\\f269\"} .fa-opera:before{content:\"\\f26a\"} .fa-internet-explorer:before{content:\"\\f26b\"} .fa-tv:before,.fa-television:before{content:\"\\f26c\"} .fa-contao:before{content:\"\\f26d\"} .fa-500px:before{content:\"\\f26e\"} .fa-amazon:before{content:\"\\f270\"} .fa-calendar-plus-o:before{content:\"\\f271\"} .fa-calendar-minus-o:before{content:\"\\f272\"} .fa-calendar-times-o:before{content:\"\\f273\"} .fa-calendar-check-o:before{content:\"\\f274\"} .fa-industry:before{content:\"\\f275\"} .fa-map-pin:before{content:\"\\f276\"} .fa-map-signs:before{content:\"\\f277\"} .fa-map-o:before{content:\"\\f278\"} .fa-map:before{content:\"\\f279\"} .fa-commenting:before{content:\"\\f27a\"} .fa-commenting-o:before{content:\"\\f27b\"} .fa-houzz:before{content:\"\\f27c\"} .fa-vimeo:before{content:\"\\f27d\"} .fa-black-tie:before{content:\"\\f27e\"} .fa-fonticons:before{content:\"\\f280\"} .fa-reddit-alien:before{content:\"\\f281\"} .fa-edge:before{content:\"\\f282\"} .fa-credit-card-alt:before{content:\"\\f283\"} .fa-codiepie:before{content:\"\\f284\"} .fa-modx:before{content:\"\\f285\"} .fa-fort-awesome:before{content:\"\\f286\"} .fa-usb:before{content:\"\\f287\"} .fa-product-hunt:before{content:\"\\f288\"} .fa-mixcloud:before{content:\"\\f289\"} .fa-scribd:before{content:\"\\f28a\"} .fa-pause-circle:before{content:\"\\f28b\"} .fa-pause-circle-o:before{content:\"\\f28c\"} .fa-stop-circle:before{content:\"\\f28d\"} .fa-stop-circle-o:before{content:\"\\f28e\"} .fa-shopping-bag:before{content:\"\\f290\"} .fa-shopping-basket:before{content:\"\\f291\"} .fa-hashtag:before{content:\"\\f292\"} .fa-bluetooth:before{content:\"\\f293\"} .fa-bluetooth-b:before{content:\"\\f294\"} .fa-percent:before{content:\"\\f295\"} .fa-gitlab:before{content:\"\\f296\"} .fa-wpbeginner:before{content:\"\\f297\"} .fa-wpforms:before{content:\"\\f298\"} .fa-envira:before{content:\"\\f299\"} .fa-universal-access:before{content:\"\\f29a\"} .fa-wheelchair-alt:before{content:\"\\f29b\"} .fa-question-circle-o:before{content:\"\\f29c\"} .fa-blind:before{content:\"\\f29d\"} .fa-audio-description:before{content:\"\\f29e\"} .fa-volume-control-phone:before{content:\"\\f2a0\"} .fa-braille:before{content:\"\\f2a1\"} .fa-assistive-listening-systems:before{content:\"\\f2a2\"} .fa-asl-interpreting:before,.fa-american-sign-language-interpreting:before{content:\"\\f2a3\"} .fa-deafness:before,.fa-hard-of-hearing:before,.fa-deaf:before{content:\"\\f2a4\"} .fa-glide:before{content:\"\\f2a5\"} .fa-glide-g:before{content:\"\\f2a6\"} .fa-signing:before,.fa-sign-language:before{content:\"\\f2a7\"} .fa-low-vision:before{content:\"\\f2a8\"} .fa-viadeo:before{content:\"\\f2a9\"} .fa-viadeo-square:before{content:\"\\f2aa\"} .fa-snapchat:before{content:\"\\f2ab\"} .fa-snapchat-ghost:before{content:\"\\f2ac\"} .fa-snapchat-square:before{content:\"\\f2ad\"} .fa-pied-piper:before{content:\"\\f2ae\"} .fa-first-order:before{content:\"\\f2b0\"} .fa-yoast:before{content:\"\\f2b1\"} .fa-themeisle:before{content:\"\\f2b2\"} .fa-google-plus-circle:before,.fa-google-plus-official:before{content:\"\\f2b3\"} .fa-fa:before,.fa-font-awesome:before{content:\"\\f2b4\"} .fa-handshake-o:before{content:\"\\f2b5\"} .fa-envelope-open:before{content:\"\\f2b6\"} .fa-envelope-open-o:before{content:\"\\f2b7\"} .fa-linode:before{content:\"\\f2b8\"} .fa-address-book:before{content:\"\\f2b9\"} .fa-address-book-o:before{content:\"\\f2ba\"} .fa-vcard:before,.fa-address-card:before{content:\"\\f2bb\"} .fa-vcard-o:before,.fa-address-card-o:before{content:\"\\f2bc\"} .fa-user-circle:before{content:\"\\f2bd\"} .fa-user-circle-o:before{content:\"\\f2be\"} .fa-user-o:before{content:\"\\f2c0\"} .fa-id-badge:before{content:\"\\f2c1\"} .fa-drivers-license:before,.fa-id-card:before{content:\"\\f2c2\"} .fa-drivers-license-o:before,.fa-id-card-o:before{content:\"\\f2c3\"} .fa-quora:before{content:\"\\f2c4\"} .fa-free-code-camp:before{content:\"\\f2c5\"} .fa-telegram:before{content:\"\\f2c6\"} .fa-thermometer-4:before,.fa-thermometer:before,.fa-thermometer-full:before{content:\"\\f2c7\"} .fa-thermometer-3:before,.fa-thermometer-three-quarters:before{content:\"\\f2c8\"} .fa-thermometer-2:before,.fa-thermometer-half:before{content:\"\\f2c9\"} .fa-thermometer-1:before,.fa-thermometer-quarter:before{content:\"\\f2ca\"} .fa-thermometer-0:before,.fa-thermometer-empty:before{content:\"\\f2cb\"} .fa-shower:before{content:\"\\f2cc\"} .fa-bathtub:before,.fa-s15:before,.fa-bath:before{content:\"\\f2cd\"} .fa-podcast:before{content:\"\\f2ce\"} .fa-window-maximize:before{content:\"\\f2d0\"} .fa-window-minimize:before{content:\"\\f2d1\"} .fa-window-restore:before{content:\"\\f2d2\"} .fa-times-rectangle:before,.fa-window-close:before{content:\"\\f2d3\"} .fa-times-rectangle-o:before,.fa-window-close-o:before{content:\"\\f2d4\"} .fa-bandcamp:before{content:\"\\f2d5\"} .fa-grav:before{content:\"\\f2d6\"} .fa-etsy:before{content:\"\\f2d7\"} .fa-imdb:before{content:\"\\f2d8\"} .fa-ravelry:before{content:\"\\f2d9\"} .fa-eercast:before{content:\"\\f2da\"} .fa-microchip:before{content:\"\\f2db\"} .fa-snowflake-o:before{content:\"\\f2dc\"} .fa-superpowers:before{content:\"\\f2dd\"} .fa-wpexplorer:before{content:\"\\f2de\"} .fa-meetup:before{content:\"\\f2e0\"} .sr-only{position:absolute;width:1px;height:1px;padding:0;margin:-1px;overflow:hidden;clip:rect(0, 0, 0, 0);border:0} .sr-only-focusable:active,.sr-only-focusable:focus{position:static;width:auto;height:auto;margin:0;overflow:visible;clip:auto}","link":"/float/fontawesome/css/font-awesome.min.css"}],"posts":[{"title":"equals和==的爱恨情仇","text":"吃饭的途中突然看到了equal这个单词，于是开始了各种联想… equals和==equals和hashCode是Object中关于相等(这里的相等是广义的，不是单指内存或值相等)的两个方法当然其他类对这两个方法进行了重写，我这里主要是对String类的equals进行分析而作为老牌相等的判断”==”，这个时候也要来凑凑热闹 Object中的equals老规矩，先看一下源码吧下面给出的是Object中的equals和hashCode的源码 1234567891011121314151617// Obejct.equalspublic boolean equals(Object obj) { return (this == obj);}// Object.hashCodepublic int hashCode() { int h= hash; if (h== 0 &amp;&amp; value.length &gt; 0) { char val[] = value; for (int i = 0; i &lt; value.length; i++) { h = 31 * h + val[i]; } hash = h; } return h;} 我们先说一下hashCode吧hashCode的计算方法就是以31为权，对每一个字符的ASCII码进行计算这里提到hashCode的原因是，一旦两个对象相同，那么这两个对象的hashCode一定相等所以一般equals被重写时，hashCode尽量也要被重写 用一句通俗的话来讲，内存就像是家，家不一定是固定不变的，你内存改变了可以理解为搬家了而hashCode就像是身份证号码，它是唯一的当然不同的计算方法，得出来的hashCode值不一样，因为毕竟中国和美国的身份证号不一样吧 简单的了解了一下hashCode以后，我们再看一下equals方法发现Object中的equals其实就是”==” 那么”==”的逻辑是什么，我们看一下具体代码 12345678910111213141516171819int a = 12;int b = 12;String x = \"abc\";String y = \"abc\";String m = new String(\"abc\");String n = new String(\"abc\");System.out.println(a == b);System.out.println(x == y);System.out.println(x == m);System.out.println(m == n);// run/* true true false false*/ 这里就涉及到了内存存储了众所周知，在java中分为6个地方存储数据，分别是寄存器、堆栈、堆、静态方法区、常量池和非RAM储存那么分别是那些数据存放在这些地方呢 JVM内存存储 寄存器：作为最快的存储区，它比较高冷，根据编译器来分配不是我们能控制的 堆栈：我习惯叫它栈，存放的是基本类型的变量数据和对象的引用变量(对象的引用不是对象本身) 堆：存放所有new出来的对象，就是实例 静态方法区：存放所有的class和static 常量池：存放基本数据类型常量和字符串常量 现在就可以解释上面那段代码的运行结果了主要是分析一下x，y，z 首先在常量池中存放在x这个时候执行String y = &quot;abc&quot;;,会先在常量池中找，找到了指向同一块地址而对于z，明确说是new，那不就存放在堆中了其实String m = new String(&quot;abc&quot;);可以拆分为String temp = &quot;abc&quot;; String m = new String(temp);意味着有两个对象，一个存放在堆内存中，一个存放在常量池里 既然了解到这，不如再看一段代码 123456789int a1 = 1;int a2 = 1;int a3 = 2;int a4 = a1+a2;Integer b = 128;Integer c = 128;System.out.println(a3 == a4);System.out.println(b == c); 怎么样，有了自己的答案吗？正确答案是true false是不是觉得刚刚弄懂的东西又糊了 这里我们分析一下a3和a4，首先查找有没有值为2的常量，没找到于是自己开辟了一个空间，指向a3而a4的值也是2，于是在创建的时候直接指向a3地址。对于b和c来说，其实有一个范围(-128~127),明显不在这个范围中，只能各自指向单独的对象 String中的equals咋们继续往下走，说一下String中的equals还是刚才的代码，将”==”更改成equals 123456String x = \"abc\";String y = \"abc\";String z = new String(\"abc\");System.out.println(x.equals(y));System.out.println(x.equals(z)); 很清晰都是trueString复写Object的equals，更多的想要在意的内容相等，而不是地址相等当然为了一些特殊的用法，我们也可以自己重写equals方法 最后我贴一下它们之间的比较 对于变量来说，”==”判断是否指向同一个内存空间，equals判断所指空间的值是否相同 对于字符串来说，”==”比较内存地址，equals直接对字符串内容比较 对于对象来说，”==”比较引用是否相同， equals()指的是值是否相同","link":"/2019/05/22/2019-5-22-equals%E5%92%8C==%E7%9A%84%E7%88%B1%E6%81%A8%E6%83%85%E4%BB%87/"},{"title":"学习反射的前提","text":"记录一下学习反射的过程吧 学习反射的前提类的加载、连接和初始化当程序主动使用某一个类的时候，如果这个类还未被加载到内存中，则系统会经过三个步骤加载、连接和初始化来进行类的加载。而这三个步骤可以叫类初始化或类加载。 类的加载：指的是将.class文件加载到内存中，并且创建一个Class对象(java.lang.Class)，类的加载由类加载器完成; 类的连接：负责把类的二进制数据合并到JRE中，分为三个阶段：验证、准备和解析，验证被加载的类是否符合内部结构，准备是为类的类变量分配内存设置初始值，解析是将类的二进制数据的符号引用替换成直接引用； 类的初始化：虚拟机负责对类进行初始化，主要是对类变量设置初始值，两种方式：声明类变量时指定初始值，使用静态代码块设置初始值，在声明变量初始值时，静态代码块会当做类的初始化语句 类的初始化具体步骤 这个类如果还没有被加载和连接，则程序先加载并连接该类； 这个类的直接父类如果还没有初始化，则先初始化父类； 这个类如果有初始化语句，则系统依次执行这些初始化语句。 那么哪些时候会进行类初始化呢？ 创建类的实例：new、反射和反序列化； 调用某个类的类方法：静态方法； 访问某个类或接口的类变量，或为该类变量赋值； 使用反射方法来强制创建某个类或接口对应的Class对象； 初始化某个类的子类； 直接使用java.exe运行某个主类； Class类在类加载器中被加载的时候，会创建一个Class对象 获取Class对象 Class.forName(全限定名); 全限定名包括包名，是Class类的静态方法，传入的是字符串参数； 类名.class; 返回该类的Class对象； 实例对象.getClass(); 调用某个对象的getClass方法，返回该对象所属类的Class对象； 这里来一个例子 12345678910111213141516171819202122232425262728293031323334Package com.test;class Person{ static{ System.out.println(\"Person loading ...\"); }}class Student{ static{ System.out.println(\"Student loading ...\"); }}class MyClass{ public static void main(String [] args){ System.out.println(\"start ...\"); // new 一个 Person new Person(); System.out.println(\"new person ending ...\"); try { //使用 Class.forName 获取对象 Class class1 = Class.forName(\"com.test.Student\"); } catch(Exception e) { System.out.println(\"can not open Student ...\"); } System.out.println(\"ending...\"); }}/* start ... Person loading ... new person ending ... Student loading ... ending ... */ 首先可以清晰的看到只有需要这个类的时候，这个类才进行加载。接着我们看一下Class.forName()方法，首先看Student类有没有加载，没有加载那就调用类加载器载入内存，进行初始化操作。如果加载过后会怎么样呢？ 12345678910111213141516171819202122232425package com.test;class Person{ static{ System.out.println(\"Person loading ...\"); }}class MyClass{ public static void main(String [] args) throws ClassNotFoundException{ System.out.println(\"start ...\"); // 实例一个 Person 对象 Person p = new Person(); System.out.println(\"new person ending ...\"); // 使用 getClass 方法和 Class.forName 方法 Class class1 = Class.forName(\"com.test.Person\"); Class class2 = p.getClass(); System.out.println(\"ending...\"); }}/* start ... Person loading ... new person ending ... ending... */ 类只加载一次，在JVM中就只有一个Class对象，即在内存中每个类有且只有一个相对应的Class对象。于是在实例化Person后，无论是p.getCLass()还是Class.forName(&quot;com.test.Person&quot;)都不会在加载了。 接下来该谈谈类.class方法了，这里先说明一下啊，静态代码块和静态变量都属于类变量，他们的执行顺序是谁先在前面谁先执行和forName不一样.class不会自动初始化Class对象 1234567891011121314151617181920212223242526package com.test;class Person{ static final String a = \"static final a ...\" ; static String b = \"static b ...\"; static{ System.out.println(\"Person正初始化...\"); }}class MyClass{ public static void main (String [] args) throws Exception{ System.out.println(\"start ...\"); Class class1 = Person.class; System.out.println(\"Person尚未初始化...\"); System.out.println(Person.a); System.out.println(Person.b); }}/* start ... Person尚未初始化... static final a ... Person正初始化... static b ... */ 明显看到在执行Class class1 = Person.class;后并没有初始化Class对象。那么在执行Person.a的时候为什么没有输出其它两个字句？其原因是fianl比较特殊，如果是在编译时已经确定了值，那么就相当于一个“宏定义”，java在编译的时候将出现它的地方直接替换成这个值，也不需要初始化。而如果没有确定值，像static final long time = System.currentTimeMillis();就是一个典型没有确定下来的值，这个时候还是得初始化。 FieldClass是为了获取一个类的数据信息，那么什么可以获取类的属性和属性的值呢？Field用于获取某个类的属性或该属性的属性值，Field的方法比较简单，我就不举demo了。 获取类的属性获取类的属性Field提供如下几种方法： Field Class.getDeclaredField(String name); 返回此 Class 对象所表示的类或接口的指定已声明字段（包括私有成员）。 Field[] Class.getDeclaredFields(); 返回此 Class 对象所表示的类或接口所声明的所有字段（包括私有成员）。 Field Class.getField(String name); 返回此Class 对象所表示的类或接口的指定公共成员字段。 Field[] Class.getFields(); 返回此 Class 对象所表示的类或接口的所有可访问公共字段。 获取类属性的值或修改属性值Field为获取属性的值提供了get(Object obj)方法，对于私有方法，还需要先设置Accessible为true；重新设置属性的值为set方法。 总结一下 类加载的过程分为三步：加载、连接和初始化； 在类初始化的时候会伴随创建一个Class对象； 加载类只会加载一次，因此也只会有一个CLass对象(如果是不同的类加载器)； 获取Class对象有三种方法，其中类.class并不会初始化； 获取类的属性需要用到Field。","link":"/2019/05/25/2019-5-25-%E5%AD%A6%E4%B9%A0%E5%8F%8D%E5%B0%84%E7%9A%84%E7%9F%A5%E8%AF%86/"},{"title":"将node和mongodb部署到CentOS","text":"在腾讯云CentOS上搭建node环境和mongodb 由于需要将《方寸》上线，因此需要选择一个服务器来搭建我的后端环境，经过多方面考虑(经济原因)我选择了腾讯云，腰包问题只购买了1核2G的云主机，将就着用吧。 主要参考教程是云上云写的《如何将node+mongodb项目部署在腾讯云服务器，并进行性能优化的》，这里记录一下自己遇到的坑和解决方案。 流程1. 购买服务器这里就不多说了，我购买的是腾讯云的CentOS 2. 登陆服务器登陆服务器，我使用的Windows的PowerShell ssh root@122.23.34.54 登陆进来过后，可以升级一下CentOS yum -y update 3. 安装 node由于在官网安装 node太慢了，这里使用scp命令将windows在的文件上传给服务器。 首先，进入node官网 https://nodejs.org/en/download/ 下载Source Code文件。 在下载好的目录按住shift键,选择在此处进入PowerShell，然后使用scp命令上传文件。 后面的这个是路径，一般/usr/local/src是放源码的。 上传一般很快的，这个时候切到/usr/local/src这个目录下。 cd /usr/local/src 进行解压操作: tar -xzvf node-v12.13.0.tar.gz // 具体按照你下的node版本 解压完毕后，就需要编译源码了，这个时候需要用到 g++ yum -y install gcc gcc-c++ autoconf 这里需要注意一下，我安装的时候就是没有注意版本的问题，导致预编译一直warning,首先查看一下版本 gcc -v 如果版本低于7.0.0的话，我建议还是要升级一下，不然后面会出问题，这里有两种升级方式， 第一种： 123&gt;yum install centos-release-scl -y&gt;yum install devtoolset-7 -y&gt;scl enable devtoolset-7 bash 这个是自动升级，我成功了，如果你的版本还是较低的话，这里我放一个连接，可以参考一下 https://note.leodev.me/2018/03/30/nodejs-installation-notes/ ，博客介绍了如何手动升级。 至此准备工作做完了。切换到解压后的文件夹 cd node-v12.13.0 执行配置脚本来预编译: ./configure 如果没有报错，就编译源代码，这个过程比较久 make 编译完成后，执行安装命令: make install 测试一下，node有没有安装好: node -v 如果提示 -bash node: command not found只能用下面的方式来解决了: 123sudo yum install epel-releasesudo yum install nodejsnode --v 安装npm 和 express 123sudo yum install npm --enablerepo=epelsudo npm install -g expresssudo npm install -g express-generator 至此，node安装成功！ 4. 安装mongodb下载地址：https://www.mongodb.com/download-center/community 我去看了一下，发现centos不知道在哪一个，我就直接按我看的那篇教程操作了一遍。 下载安装包，和解压 1234cd /usr/localwget https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-4.0.4.tgztar zxvf mongodb-linux-x86_64-4.0.4.tgzmv mongodb-linux-x86_64-4.0.4 mongodb 要在var文件夹中建立mongodb文件夹，分别用来存放数据和日志 123mkdir /var/mongodbmkdir /var/mongodb/datamkdir /var/mongodb/logs 这里的安装我基本是按教程来的，打开rc.local文件，添加Centos开机启动项 vim /etc/rc.d/rc.local 将mongodb启动命令追加文件中，使开机自启动 1/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork 接着退出vim，启动mongodb，命令和上面一样 1/usr/local/mongodb/bin/mongod --dbpath=/var/mongodb/data --logpath /var/mongodb/logs/log.log -fork 如果没有报错，基本就安装成功了。我连接mongodb没有账号和密码，如果你的有，可以去我参考的博客中看一下。 5. 安装nginx这里我参考了 https://blog.csdn.net/littleorange6/article/details/78532167 和 https://blog.csdn.net/weixin_34044273/article/details/91365937 使用 yum安装: yum install nginx 这个时候你就可以通过你的公网ip来访问了，如果你没有出现welcome to nginx，不要慌，这个是因为腾讯云要设置安全组，我给一个连接吧 https://cloud.tencent.com/document/product/213/15377 现在可以访问了，接下来就是更改nginx的配置了。 由于我只是配置了一个接口，我只改了/etc/nginx/nginx.conf的一部分: 12345678910111213server { listen 80; server_name your_name; location / { proxy_pass http://localhost:3000; } error_page 500 502 503 504 /50x.html; location /50x.html { root /usr/share/nginx/html; }} 配置完后，需要reload一下 nginx -s reload 6. 上传代码我这个软件由于不需要前端上传，因此我依旧使用scp命令，直接上传到某一个 目录下就可使用了，当然为了永久运行，需要借助到pm2 安装pm2： npm install -g pm2 开启服务: cd 你的工作目录 pm2 start app.js // 我的是启动文件是app.js 这个时候，前端就可以用开放端口的ip来获取数据了。 完成了!","link":"/2019/11/19/2019-11-19-%E5%9C%A8%E8%85%BE%E8%AE%AF%E4%BA%91CentOS%E4%B8%8A%E6%90%AD%E5%BB%BAnode%E7%8E%AF%E5%A2%83%E5%92%8Cmongodb/"},{"title":"浅谈反射机制","text":"反射是java的闪光点，极其重要 反射在上一个博客学习反射的前提中，应该比较清晰的说明了类在加载到内存中创建过程，那么这一篇将会了解到为什么会用到反射了。 什么是反射？反射机制是在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性，这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制。 我的个人理解是：通俗点讲，一个封装好了的类只给我们提供了公共方法和属性，这样便于我们使用而不需要关心这个类具体怎么实现的可是一旦我们需要获取或者修改这个类的私有属性和方法时怎么办呢？这个时候反射机制就为我们提供了极大的便利。 在此之前Class类的一些方法已经让我们知道了类的信息都保存在Class对象中了，我也浅浅提到了Field方法可以获取和修改这些属性和方法了。那么这篇博客将详细讲解Field和Class在反射方面的运用了。 获取类的信息(其实这一部分在上一篇博客中详细提到了，我甚至想直接将这两篇博客合并)首先会定义父类Person和子类Student，分别用Field和Method方法来获取类的变量和方法代码如下： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263class Person { public String a_person = \"String a\"; private String b_person; public void fun_person1(){ }}class Student extends Person{ private String a_student; private int b_student; public String c_student; public void fun_student(){ System.out.println(\"student method\" + a_student + \"; age : \" + b_student); } private void setA_student(String aStudent){ a_student = aStudent; } private void setB_student(int bStudent){ b_student = bStudent; } private int getB_student(){ return b_student; } private String getA_student(){ return a_student; }}public class test { public static void main(String[] args) { Student student = new Student(); Class class1 = student.getClass(); System.out.println(\"获取类名：\" + class1.getName()); Field[] fields = class1.getFields(); Method[] methods = class1.getMethods(); for (Field field : fields) { System.out.println(field.getType().getName()+ \" \" + field.getName()); } System.out.println(\"----------------\"); for (Method method : methods) { Class returnType = method.getReturnType(); System.out.println(returnType.getName() + \" \"+ method.getName()); } }}/* 获取类名：Student java.lang.String c_student java.lang.String a_person --------------- void fun_student void fun_person1 void wait void wait void wait boolean equals java.lang.String toString int hashCode java.lang.Class getClass void notify void notifyAll */ 如果将代码Field[] fields = mClass.getFields();&amp;nbspMethod[] mMethods = mClass.getMethods();换成Field[] fields = mClass.getDeclaredFields();&amp;nbspMethod[] mMethods = mClass.getDeclaredMethods();可以看到输出结果： 12345678910获取类名：Studentjava.lang.String a_studentint b_studentjava.lang.String c_student---------------void setB_studentjava.lang.String getA_studentint getB_studentvoid setA_studentvoid fun_student 代码确实写的很野鸡，但这不是关键，可看出来getFields()和getMethods()是获取公共的属性和方法，也包括父类的属性和方法getDeclaredFields()和getDeclaredMethods()是获取所有的属性和方法，但是只获取此类的 修改类的属性值如果只是单纯的获取方法和属性完全体现不出反射的优势利用反射我们还可以访问私有方法和修改类的属性值下面就是代码实现： 1234567891011121314151617181920212223242526272829303132333435363738394041import java.lang.reflect.*;class Person { private String a = \"person\"; private void fun(String name,int age){ System.out.println(name + age); } public void setA(String a) { this.a = a; } public String getA() { return a; }}public class Reflect { public static void main(String[] args) throws Exception{ Person person = new Person(); Class class1 = person.getClass(); Field privateField = class1.getDeclaredField(\"a\"); Method privateMethod = class1.getDeclaredMethod(\"fun\", String.class, int.class); if (privateField != null) { privateField.setAccessible(true); System.out.println(\"未修改之前：\" + person.getA()); privateField.set(person, \"student\"); System.out.println(\"修改之后： \" + person.getA()); } System.out.println(\"---------------------\"); if (privateMethod != null) { privateMethod.setAccessible(true); privateMethod.invoke(person, \"james \", 33); } }}/* 未修改之前：person 修改之后： student --------------------- james 33 */ 获取私有需要用getDeclaredField和getDeclaredMethod方法，对于getDeclaredMethod来说，第一个参数为想要获取的私有方法名，后续参数为此方法的形参。上次也提到过，访问私有方法或变量需要将setAccessible设置为true，而invoke方法主要是给刚才获取的私有方法传参。 目前还未涉及到框架，而且我个人实力有限，对于反射只能了解这么多，如有问题欢迎指正。 总结一下由于类加载入内存中，在运行状态时使java拥有了反射机制，反射机制带来的好处使我们可以通过加载类创建的Class对象可以获取想要的方法并且可以修改变量值。","link":"/2019/05/27/2019-5-27-%E6%B5%85%E8%B0%88%E5%8F%8D%E5%B0%84%E6%9C%BA%E5%88%B6/"},{"title":"C++指针与数组","text":"学C语言的时候不认真，现在学C++知道痛了 一、什么是指针？​ 变量的指针就是变量的地址。用来存放变量地址的变量就是指针变量。 ​ 对于 int a = 10; int * p = &amp;a; ​ p的值：变量a的地址； ​ *p：表示指针变量p所指向的存储单元。 补充：关于 “&amp;” 与 “*” 运算符 “&amp;” 与 “*” 优先级别相同，都按从右至左结合 ① &amp;*p = &amp;a ② *&amp;p = *p 二、指针与一维数组(一) 定义​ 首先，数组名代表数组中第一个元素的地址，故下面两个语句等价： 12p = &amp;a[0];p = a; ​ 数组名不代表整个数组，因此 p = a 的作用是把 a 数组的首元素的地址赋给指针变量 p，而不是把数组 a 各元素的值赋给 p。 ​ 以下内容都根据下面的代码进行讨论 12int a[5] = {1, 2, 3, 4, 5};int *p = a; ​ 则此时 p 指向数组首元素的地址，故输出 *p 结果为 1 。 ​ 如果我想输出下一个元素怎么办？ ​ 答案是 *(p+1) ​ 此时也许你会疑惑 p 代表的是地址，假设值为 0x00，如果我对 p+1 ，难道不是 0x01 ? ​ 事实上，这样的理解是错误的， p+1 不是简单的将 p 值 +1 ，而是 p 加上了数组元素类型的字节数。这里是整型数组， 每个数组元素占 4 个字节，p+1 的实际是 p + sizeof(int) ​ 这就解释了明明在32位系统下，指针所占大小都是 4 个字节，为什么还需要指定数据类型了。因为不同的数据类型，在执行 p+1 的时候，偏移的字节是不同的。比如整型偏移 4 个字节；而双精度浮点型偏移 8 个字节。 ​ 那么我们随机访问数组元素就可以用下面的方式表示了 12p + i 表示的就是 a[i] 的地址*(p+1) 是 p+i 所指向的数组元素，即a[i] ​ 其实我们换一个角度理解，对于数组 a 来说： 12a[0] 表示第一元素a[1] 表示第二个元素 ​ 难道你曾经没有疑惑过吗？ 明明下标只加了 1，却可以访问 4 个字节以后的下一个元素？其实，a 代表数组首元素的地址，a + i 也是地址。计算方法同 p + i，都是 a + i * sizeof(int) 。所以一切用 a[i] 访问的，我们也可以写成 *(a+i)，这就是为啥 “[]” 叫变址运算符。 ​ 整合一下，看下面的代码： 123456789int a[5] = { 1,2,3,4,5 };int* p = a;cout &lt;&lt; *p &lt;&lt; endl; // 1cout &lt;&lt; *(p + 1) &lt;&lt; endl; // 2cout &lt;&lt; *a &lt;&lt; endl; // 1cout &lt;&lt; *(a + 1) &lt;&lt; endl; // 2cout &lt;&lt; a[1] &lt;&lt; endl; // 2cout &lt;&lt; p[1] &lt;&lt; endl; // 2 ​ 可以看出来我们如何 使用a访问数组元素的，利用p使用同样的方式也可以访问；​ 在看看这两句话句话 “a是数组首元素的地址” ，”指针就是地址“；​ 所以 a 也是指针，这就是为什么 p 的操作方式 a 同样也可以使用。 ​ 那么我们平时访问数组元素 a[i] 就可以用 *(a+i) 代替吗？ ​ 答案当然是肯定的。但要注意一个坑，对于 “[]” 来说，a[5]是错误的；由于 *(a+5) 操作的是地址，因此是会在编译阶段可以通过，但是运行时访问了非法空间，就会报错。 (二) 练习12345678int a[5] = { 5,4,3,2,1 };int* p = a;cout &lt;&lt; *p++ &lt;&lt; endl;cout &lt;&lt; *p &lt;&lt; endl;cout &lt;&lt; *(p++) &lt;&lt; endl;cout &lt;&lt; *++p &lt;&lt; endl;cout &lt;&lt; (*p) + 1 &lt;&lt; endl; ​ 每一行输出语句执行的时候，其他输出语句注释，那么结果如下： 12345cout &lt;&lt; *p++ &lt;&lt; endl; // 5cout &lt;&lt; *p &lt;&lt; endl; // 4cout &lt;&lt; *(p++) &lt;&lt; endl; // 5cout &lt;&lt; *++p &lt;&lt; endl; // 4cout &lt;&lt; (*p) + 1 &lt;&lt; endl; // 6 ​ 为什么呢？ &gt;首先我们需要知道这两个知识点： &gt; &gt;① 前 ++ 和 后 ++ 的区别； &gt; &gt;② ++ 和 * 的优先级相同，结合方向自右向左​ 故 *p++ 等价与 *(p++)，由于是 后++ ，先计算 *p，然后再使 p 的值加 1，故运行下面的语句： 12cout &lt;&lt; *p++ &lt;&lt; endl; // 5cout &lt;&lt; *p &lt;&lt; endl; // 4 ​ 而 *++p 是 前++ ，因此 p 的值加 1，再计算 *p 的值，此句话相当于 a[1] = 4。 ​ (*p)++，是先取 *p 得 5 ，元素值加 1 ，故为 6 。 ​ ​ 那么根据上面的分析，迭代输出时 12for(p = a; p &lt; a + 10; p++) cout &lt;&lt; *p; ​ 可以改为 12for(p = a; p &lt; a + 10;) cout &lt;&lt; *p++; 三、指针与二维数组12345int a[3][4] = { {11, 12, 13, 14}, {21, 22, 23, 24}, {31, 32, 33, 34},}; ​ a 代表首元素 a[0] 的首地址，而 a[0] 是 a[0][0]的首地址，故以下输出为同一个地址： 123cout &lt;&lt; a &lt;&lt; endl;cout &lt;&lt; a[0] &lt;&lt; endl;cout &lt;&lt; &amp;(a[0][0]) &lt;&lt; endl; ​ a 指向 a[0] ，所以 a+1 ，a+2 指向 a[1] ，a[2] 。 ​ ​ 如果我们想要访问 a[0][1]呢？ ​ *(a[0] + 1) 或者 *(*a+1) ​ 那如果想要访问a[1][1]呢？ ​ 我们一点点推出来，首先 a[1] +1 是 a[1][1] 的地址，a[1] 是不是可以由 *(a+1)替换对吧。故*(a+1)+1 就代表a[1][1]的地址，最后我们解引用，a[1][1]就可以通过*(*(a+1)+1)来获取。 ​ ​ 那么如何定义一个指针指向二维数组？ 1int (*p)[4] = a; ​ 知道为什么要这样定义吗？如果把二维数组 a 看成一个具有 3 个元素的一维数组，那么这三个元素就是 a[0]、a[1]、a[2]，而这三个元素又是一个具有 4 个元素的一维数组。 ​ 以 a[0] 为例，a[0] 代表的一维数组是一个具有 4 个 int 类型元素的数组，结合一维数组可知，a[0] 的类型为 int *。同理，a[1]、a[2] 类型都是 int *。 ​ 而 a 是 3 个 int *类型作为元素形成的数组，因此 a 就是一个指向具有三个 int 类型元素数组的数组指针，也就是 int (*)[3]。 ​ 大家再来看看： 12int (*p)[4] = a;int *m = a[0]; ​ 是不是有点感觉了。","link":"/2020/02/13/2020-05-06-C++%E6%8C%87%E9%92%88%E4%B8%8E%E6%95%B0%E7%BB%84/"},{"title":"坦克大战单机版","text":"好久都没有上传博客，失综人口回归 坦克大战单机版基于马士兵老师的讲解和代码进行的第一阶段的改良目前模块之间耦合性较高，而且存在较高的安全隐患 这是第一阶段的代码，主要是学习基础后的一个总结吧 游戏介绍按键操作 玩家一: 开火 V , 大招 B 玩家二: 开火 J , 大招 K 保存分数: ctrl 暂停: P 血条、蓝条: 初始值100 继续: enter 游戏规则玩家出生在基地附近，保卫基地并杀死敌人，玩家蓝条满时释放大招可以使周围坦克全部死掉，每杀死5个敌人蓝条加满，敌人分为第一波敌人和第二波敌人，第二波敌人血厚；到达一定分数的时候进入第二关，第二关敌人速度变快，血更厚，并且有一个boss，boss可以往四面八方发射坦克。 界面显示这是登录界面，连接mysql进行登陆或者注册这是一个单独的JFrame框，可以在以后的类似界面当工具包使用 下面这是单人模式的游戏界面，内容包括我的坦克、敌人坦克、血块、基地、可消失墙、不可消失墙、爆炸效果、玩家排行榜、游戏模式、坦克信息等 当游戏通关后，进入如下界面，回车进入下一关 你的基地被摧毁或者你被敌人杀死，游戏结束 双人模式和单人模式主逻辑是一样的，就是在界面下方标识不同 代码问题 目前耦合性较高，并且在相互调用的时候，加入了过多的静态变量，因此安全性隐患较高，可以在以后的阶段进行优化和改进。 在关于这个代码的编写过程中，使用的是”面向搜索编程”，对于一些功能的实现都使用了网上的方法，可以说是集各家之手编写了一个并不完美的代码 耗时了三天，基于马士兵老师坦克大战单机版编写","link":"/2019/06/27/2019-5-27-%E5%9D%A6%E5%85%8B%E5%A4%A7%E6%88%98%E5%8D%95%E6%9C%BA%E7%89%88/"},{"title":"《方寸》简易教务系统","text":"《方寸》经过了大的升级迭代，一代目彻底被代替 下面的内容基本上就是《方寸》在github开源的README了，放一个连接吧 https://github.com/KDaisyers/inchWorld 方寸 – 简易教务系统 由于教务系统过于繁杂臃肿，学生平时主要使用课表和成绩查询，并且教务系统尚未内置义工时和电费及图书查询等功能，学生平时多在各个公众号之间切换。为了方便学生的查询和简化访问教务系统，因此本人开发了方寸，使用node js和vue js来做一个简易的教务访问系统 前端 – 基于 Vue.js+Webpack+mui+mint开发 如果用过《麻雀笔记》的同学一定有熟悉的感觉，我个人非常喜欢这一款笔记，然后就把页面给Copy了下来，虽然没有大佬画得好，但是重在实用嘛。 进入软件，需按学号和密码登陆，登陆以后可以直接查看和使用如下几个功能： 重要日子 班级课表 义工时查询 电费查询 – 有一个小彩蛋 任务清单 成绩查询 图书馆藏 体测成绩 一开始还准备加一个打卡数据的，但是目前学校换成了步道乐跑，就没有加入这个功能。 功能比较简单，为了加大前端人员的工作量，于是让他加了一个TODO功能，怎么说呢，按需使用吧。课表界面实在是做的草率，版本v1.0.0可能真的只能显示当前周，抱歉！！！ 接下来就是一大波图片了 界面也许不尽人意，如果你有新的设计或者想法的话，我可以提供后端API，你可以根据自身的喜好设计满意的界面；如果你已经使用了一段时间，发现有时候有使用不顺畅的问题，这里我想说一声抱歉，个人开发者实在没有那么多钱去购买服务器；关于操作和使用，目前在APP的帮助界面和首页都有相关介绍… 如果你是一名前端开发者，看到了我的Vue代码，请不要喷我。这个是我刚在B站学完Vue.js后直接上手的一个小项目，目前风格和写法都是教我的老师带给我的，可能比较新手，海涵。请不要问我为什么不用Webpack脚手架，不是我不会搭建，当自己去各个官网去搜索配置文件写法的时候，其实真的可以学习很多。 更新2019-11-17使用了HBuilder打包成APP，出现了一堆Bug，为了解决清空后台保持登陆和正常退出登录，导致在VueX中的代码真的是无法看，由于没上传到服务器，目前只能在局域网中使用。 更新2019-11-18上线服务器，目前部署在腾讯云1核2G的云主机上，由于带宽原因访问可能并不流畅，再加上是H5打包APP，没有安卓原生流畅，这个实在是抱歉。 更新2020-02-14方寸2.0上线，界面大改加入RSS订阅功能，旨在更好的服务同学。 后端 – 基于Node开发Node开发后端看起来似乎比较异类，在一堆语言中，选择Node也许不是最完美的选择，但却是一个新手最方便的选择，目前我主学的Java还没看到框架，如果要等到我学完Spring-Boot，黄花菜都凉了。 说明: 后端代码没有开源，但不意味着并不安全，只不过代码写的过于杂乱，我自己都不想再看一遍，就不拿出来献丑了。说用到的技术基本可以说为零，我拿到的数据都是通过爬取各个网页数据，进行整合然后返回给前端处理。这里说一下所用技术: request + cheerio：获取网页数据和分析 没了 我仔细看了一下，好像就只有这些了。我还在犹豫要不要加个数据库的功夫，代码已经被我翻完了。代码简陋到我无法直视，算了就这样吧，这个项目应该会长期维护，等我使用Java重写一遍的时候应该会开源吧。 最后请不要喷我的代码 ，我相信我会重构的。","link":"/2020/02/13/2020-02-13-%E3%80%8A%E6%96%B9%E5%AF%B8%E3%80%8B%E7%AE%80%E6%98%93%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F/"},{"title":"《方寸》收藏夹的使用","text":"打开方寸收藏夹的正确方式 介绍作为一个正经的教务系统，如果不能陶冶学生的情操，那还叫啥教务系统。因此《方寸》迎来了一次大的变革，所有版面更换，加入更加美观使用的功能，而新闻资讯热点订阅应运而生。当然这些新闻资讯不是某某震惊部，也不是某某看点，《方寸》中添加的是知乎，少数派互联网资讯，以及WiKi百科和China Daily等学习资讯，旨在做好一个教务系统的职责，逃。 操作首先点击底部导航栏的订阅栏，选择喜欢的资讯热点，这里以知乎为例。 进入文章后，如果发现文章比较对你的胃口，点击右上角的收藏进行剪藏。 当然，你可以在文章中直接进入收藏夹列表，也可以去个人中心，打开收藏进行浏览或修改删除。 你在，方寸就在。","link":"/2020/02/13/2020-02-13-%E3%80%8A%E6%96%B9%E5%AF%B8%E3%80%8B%E6%94%B6%E8%97%8F%E5%A4%B9%E4%BD%BF%E7%94%A8/"},{"title":"《早报生成器》MPGenerator","text":"在吾爱破解多次刷到《公司早报生成器》后，我终于决定… 灵感来自 公司早报生成器(含天气、新闻、每日一言) 日报生成器DailyPape 功能特性 热点新闻 新闻源切换 早报预览 每日一言 天气显示 天气预报 图片切换 界面简洁 一键复制 界面展示主界面：窗体不可缩小, 显示新闻热点，早报预览，每日一言和今日天气 上半区域界面 新闻热点，默认是《人民网》Top10，可以切换至《IT之家》 早报预览，使用的是搜狐API得到城市位置接着根据百度天气API得到今日天气，这里需要注意的是搜狐API的一天访问次数有限制，因此不要使用超过十五次以上，一旦界面卡在，可以手动输入城市获取天气。 下方区域界面显示，每日一言和今日天气 重要的事情说三遍！！！ 如果图片挂了，这里有完整图片图片详情 环境参考 Node.js 12.8.1, Chromium 78.0.3904.130, and Electron 7.1.7. 下载Windows MPGenrator 安装12# Clone this repositorygit clone https://github.com/KDaisyers/MPGenerator 初始化12# Install dependenciesnpm install 运行12# Run the appnpm start","link":"/2020/01/14/2020-1-14-%E6%97%A9%E6%8A%A5%E7%94%9F%E6%88%90%E5%99%A8/"},{"title":"《微点清单》身边不可少的Todos","text":"这是一个利用Vue开发的H5 APP版的Todo清单。学习Vue的都知道，就连官方都是用Todo来编写教程，基本上Todo就是Vue的Hello World。之所以我要开发这款软件，是因为对一个没有计划的人来说，每天都是一团糟，而我就是这样的人。一开始我甚至用Minift和幕布来记录我每天所做的事，但是这样总不是办法，滴答清单收费实在打扰了，于是我开发了这款比较简单的Todo软件。 功能特性 日子 – 时时刻刻提醒自己要考研了 今日份清单 日历视图 徽章星标 番茄Todo 完成度对比 界面展示首页包含日子和所有功能图标，各图标徽章表示当前功能所拥有的Todo，简洁直观。 日历视图，点击不同日期，界面显示当天的所有Todo。 根据今天和昨天的任务情况和完成度，生成数据图。 安装使用APP下载链接 有添加按钮：微点清单 无添加按钮: 微点清单 无添加按钮使用方式 : ​ 首页点击四个按钮间隙，将会出现添加输入框 ​ Today页面点击番茄时钟同样会出现添加输入框 使用代码安装 克隆仓库1$ git clone https://github.com/KDaisyers/MicroDot.git 安装1$ npm install 运行1$ npm run dev","link":"/2020/01/08/2020-1-8-%E5%BE%AE%E7%82%B9%E6%B8%85%E5%8D%95%E7%9A%84%E5%AE%9E%E7%8E%B0/"},{"title":"Array.sort源码","text":"对Arrays.sort的一些浅显看法 Arrays.sort首先编写一个程序，使用到Arrays.sort 1234567891011121314import java.util.Arrays;public class sort { public static void main(String[] args) { // TODO Auto-generated method stub int [] a = {3,5,1,6,4,11,2}; Arrays.sort(a); for(int i=0;i&lt;a.length;i++){ System.out.println(a[i]); } }} 点击sort进入jdk1.8源码中 123public static void sort(int[] a) { DualPivotQuicksort.sort(a, 0, a.length - 1, null, 0, 0); } 点击进入DualPivotQuicksort,可以看到一些阀值 1234567891011121314151617181920212223242526272829303132333435363738/** * The maximum number of runs in merge sort. * 归并排序中的最大运行次数 */private static final int MAX_RUN_COUNT = 67;/** * The maximum length of run in merge sort. * 归并排序中运行的最大长度 */private static final int MAX_RUN_LENGTH = 33;/** * If the length of an array to be sorted is less than this * constant, Quicksort is used in preference to merge sort. */private static final int QUICKSORT_THRESHOLD = 286;/** * If the length of an array to be sorted is less than this * constant, insertion sort is used in preference to Quicksort. * 如果要排序的数组的长度小于这个常量，快速排序优先用于合并排序 */private static final int INSERTION_SORT_THRESHOLD = 47;/** * If the length of a byte array to be sorted is greater than this * constant, counting sort is used in preference to insertion sort. * 如果要排序的数组的长度小于这个常量，插入排序优先于快速排序 */private static final int COUNTING_SORT_THRESHOLD_FOR_BYTE = 29;/** * If the length of a short or char array to be sorted is greater * than this constant, counting sort is used in preference to Quicksort. * 如果要排序的字节数组的长度大于此值常量，计数排序优先于插入排序 */private static final int COUNTING_SORT_THRESHOLD_FOR_SHORT_OR_CHAR = 3200; 点击sort可以看到，似乎好像看到了第一个阀值QUICKSORT_THRESHOLD，快速排序（先不看代码，继续往下走） 1234567891011121314static void sort(int[] a, int left, int right, int[] work, int workBase, int workLen) { // Use Quicksort on small arrays if (right - left &lt; QUICKSORT_THRESHOLD) { // QUICKSORT_THRESHOLD = 286 sort(a, left, right, true); return; } /* * Index run[i] is the start of i-th run * (ascending or descending sequence). */ int[] run = new int[MAX_RUN_COUNT + 1]; int count = 0; run[0] = left; 难道right-left &lt; 286 都会是快速排序吗?暂时先不看这个方法，找到sort继续点击 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364private static void sort(int[] a, int left, int right, boolean leftmost) { int length = right - left + 1; // Use insertion sort on tiny arrays if (length &lt; INSERTION_SORT_THRESHOLD) { if (leftmost) { /* * Traditional (without sentinel) insertion sort, * optimized for server VM, is used in case of * the leftmost part. */ for (int i = left, j = i; i &lt; right; j = ++i) { int ai = a[i + 1]; while (ai &lt; a[j]) { a[j + 1] = a[j]; if (j-- == left) { break; } } a[j + 1] = ai; } } else { /* * Skip the longest ascending sequence. */ do { if (left &gt;= right) { return; } } while (a[++left] &gt;= a[left - 1]); /* * Every element from adjoining part plays the role * of sentinel, therefore this allows us to avoid the * left range check on each iteration. Moreover, we use * the more optimized algorithm, so called pair insertion * sort, which is faster (in the context of Quicksort) * than traditional implementation of insertion sort. */ for (int k = left; ++left &lt;= right; k = ++left) { int a1 = a[k], a2 = a[left]; if (a1 &lt; a2) { a2 = a1; a1 = a[left]; } while (a1 &lt; a[--k]) { a[k + 2] = a[k]; } a[++k + 1] = a1; while (a2 &lt; a[--k]) { a[k + 1] = a[k]; } a[k + 1] = a2; } int last = a[right]; while (last &lt; a[--right]) { a[right + 1] = a[right]; } a[right + 1] = last; } return; } 看到这发现了阀值INSERTION_SORT_THRESHOLD=47插入排序，注释解释道如果数组长度小于这个值，插入排序优于快速排序插入排序改进为直接插入排序和双插入排序（具体分析下一篇博客会讲）这里涉及到了时间复杂度和空间复杂度后面我会列出各个算法的复杂度比较 那么插入排序是什么样子的呢？ 当然大于阀值INSERTION_SORT_THRESHOLD就需要快速排序了快速排序代码非常的多，称为“DualPivotQuicksort”排序算法，就是双枢轴快速排序（具体分析下一篇博客会讲） 最后看一下如果都不满足这些阀值，会怎么样？如果大于阀值QUICKSORT_THRESHOLD，会进行是否适合归并排序的判断 12345678910111213141516171819202122232425262728293031323334353637// Check if the array is nearly sorted// 检查具不具备for (int k = left; k &lt; right; run[count] = k) { if (a[k] &lt; a[k + 1]) { // ascending while (++k &lt;= right &amp;&amp; a[k - 1] &lt;= a[k]); } else if (a[k] &gt; a[k + 1]) { // descending while (++k &lt;= right &amp;&amp; a[k - 1] &gt;= a[k]); for (int lo = run[count] - 1, hi = k; ++lo &lt; --hi; ) { int t = a[lo]; a[lo] = a[hi]; a[hi] = t; } } else { // equal for (int m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - 1] == a[k]; ) { if (--m == 0) { sort(a, left, right, true); return; } } } /* * The array is not highly structured, * use Quicksort instead of merge sort. * 数组不是高度结构化的，使用快速排序代替归并排序 */ if (++count == MAX_RUN_COUNT) { sort(a, left, right, true); return; }}// Check special cases// Implementation note: variable \"right\" is increased by 1.if (run[count] == right++) { // The last run contains one element run[++count] = right;} else if (count == 1) { // The array is already sorted return;} 如果数组的有序化程度合适，将每个单调的序列都存入数组，该数组的长度如果&lt;MAX_RUN_COUNT则进行归并排序，否则依然是双枢轴快速排序 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// Determine alternation base for mergebyte odd = 0;for (int n = 1; (n &lt;&lt;= 1) &lt; count; odd ^= 1);// Use or create temporary array b for mergingint[] b; // temp array; alternates with aint ao, bo; // array offsets from 'left'int blen = right - left; // space needed for bif (work == null || workLen &lt; blen || workBase + blen &gt; work.length) { work = new int[blen]; workBase = 0;}if (odd == 0) { System.arraycopy(a, left, work, workBase, blen); b = a; bo = 0; a = work; ao = workBase - left;} else { b = work; ao = 0; bo = workBase - left; }// Mergingfor (int last; count &gt; 1; count = last) { for (int k = (last = 0) + 2; k &lt;= count; k += 2) { int hi = run[k], mi = run[k - 1]; for (int i = run[k - 2], p = i, q = mi; i &lt; hi; ++i) { if (q &gt;= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) { b[i + bo] = a[p++ + ao]; } else { b[i + bo] = a[q++ + ao]; } } run[++last] = hi; } if ((count &amp; 1) != 0) { for (int i = right, lo = run[count - 1]; --i &gt;= lo; b[i + bo] = a[i + ao] ); run[++last] = right; } int[] t = a; a = b; b = t; int o = ao; ao = bo; bo = o; } 归并排序涉及两个数组，一开始初始化的时候是确认谁是原数组，谁是归并后子序列数组接着进行二路归并排序最后交换数组（具体分析会在下一个博客详解） PS各排序比较","link":"/2019/05/08/2019-5-8-Arrays.sort%E5%BA%95%E5%B1%82%E6%BA%90%E7%A0%81/"},{"title":"Linux入门系列(一)","text":"这个是边学习韩顺平老师的《Linux入门系列》视频教程边做的笔记 一、入门环境搭建 Centos 6.5 VMware Workstation 15 XShell5 XFtp 二、Linux目录树1. 根目录 ：/ 2. bin目录：/bin 3. 软件目录：/usr 目录 描述 / 根目录，linux中所有文件都是从这里开始的 /root root目录，即系统管理员目录；如果其他用户访问的话，一般会提示权限不足。 /bin 这里存放标准的Linux命令，也就是可执行的文件，平时使用的一些命令都存放在这里，像”ls”，”rm”等。具体就是当在命令行敲入”ls”时，系统就会在/bin目录中查找。 /etc 存放配置文件的地方。 /dev 存放与设备相关的文件，在Linux的世界里外设也是文件。 /home 家目录，当创建一个用户后，就会在/home文件下创建一个和用户名同名的目录。 /tmp 临时文件存放的地方，系统重启后里面的文件就会被清理。 /usr 默认软件会存放在这个目录下，包含绝大数的用户工具和应用程序。/usr/bin用于存放程序；/usr/share用于存放共享数据。 /usr/local 相当于 Programe Files。 /opt 存放可选的程序，比如测试版的fixfox。 /media 挂载usb接口下的U盘、CD/DVD驱动器等。 /boot Linux内核及引导系统程序所需的文件目录 /lost+found 一旦机器意外关机或者崩溃，就会把一些文件碎片存放在这里，下一次启动就会检查这里，并修复已经损坏的文件系统。 /mnt 存放挂载储存设备的挂载目录。 /var 这个目录的内容是经常变动的，/var下有/var/log这是用来存放系统日志的目录。/var/www目录是定义Apache服务器站点存放目录；/var/lib 用来存放一些库文件。 /sbin 系统管理的命令的存放，是超级权限用户root的可执行命令存放地，普通用户无权限执行这个目录下的命令，这个目录和/usr/sbin、 /usr/X11R6/sbin或/usr/local/sbin目录是相似的。 参考链接 Linux CentOS7 系统目录详解https://www.cnblogs.com/shaosks/p/9178157.html linux系统目录树详解https://blog.51cto.com/yangshufan/1945981 linux下面/usr/local和opt目录有何区别https://blog.51cto.com/mystery888/1835223 三、常用命令1. 用户相关命令包括创建用户、删除用户、用户组、更改密码 1234567891011121314151617181920212223242526272829303132333435363738394041# root用户下# 创建用户 # 此时用户默认是在与用户同名的组中$ useradd tom# 创建组$ groupadd ball$ groupadd swimming# 创建指定组的用户$ useradd -g ball jam# 查看用户所在的组$ id tom# 更改组# 此时jam就从ball组去了swimming组$ usermod -g swimming jam# 删除用户但是不删除/home下的目录$ userdel tom# 删除用户并且删除家目录$ userdel -r tom# 更改密码# root用户下需要指定更改哪个用户$ passwd tom# tom用户下$ passwd# 切换用户$ su root# 退回上一个用户$ exit# 登出$ logout 关于用户和用户组组以及家的概念，用户组的意义在于系统可以对一个用户组中的所有用户进行集中管理 具体的关于组的概念在《Linux入门系列(二)》中会有介绍 12345678# 用户所在的文件$ vim /etc/passwd# 用户组所在文件$ vim /etc/group# 口令所在的文件 =&gt; 用户密码和登录信息$ vim /etc/shadow （1） 用户: /etc/passwd （2） 用户组 /etc/group （3） 口令 /etc/shadow 2. Vim/Vi 相关命令123456789101112131415# 正常模式# 可使用快捷键# G =&gt; 内容末端# gg =&gt; 内容首端# e =&gt; 前移一个单词# b =&gt; 后移一个单词# n + shift + g =&gt; n是数字，表示移动到第n行# yy =&gt; 拷贝当前行# 插入模式# i/a/o =&gt; 进入插入模式# 可视模式# set nu =&gt; 显示行号# set nonu =&gt; 隐藏行号 参考链接 Vim大全https://linux.cn/article-8144-1.html 3. 日常使用相关命令12345678910111213141516171819# 帮助指令# man [命令或配置文件]$ man ls# 重启$ reboot# 关机# 立刻关机$ shutdown -h now$ halt# 定时关机# 十分钟后关机$ shutdown -h 10# shutdown 关机安全的将系统关机# halt 执行sync系统调用，文件系统操作完后就会停止内核# sync 是将内存中的文件保存在磁盘 4. 运行级别相关指令运行级别说明： 0：关机 1：单用户【找回丢失密码】 2：多用户状态没有网络服务 3：多用户状态有网络服务 4：系统未使用保留给用户 5：图形界面 6：系统重启 常用运行级别是3和5，要修改默认的运行级别在 /etc/inittab的id:5:initdefault 123456# 切换到指定运行级别# init [012356]$ init 3# 忘记root密码，找回# 开机 =&gt; 在引导的时输入回车键 =&gt; 看到一个界面后输入 e =&gt; 看到一个新的界面，选中第二行(编辑内核),再输入 e =&gt; 在这行最后输入 1 ，再输入 回车键 =&gt; 再次输入 b ,这时就进入单用户模式 （1）运行级别：/etc/inittab 5. 文件目录相关指令123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109# 显示工作空间$ pwd# 显示目录列表# ls [选项] [目录或文件]# -a 显示所有文件和目录，包括隐藏文件# -l 列表的形式显示信息$ ls$ ll# 切换目录# cd [目录路径]$ cd /etc/# 回到上一级$ cd ..# 回到家目录$ cd ~# 创建目录# mkdir [要创建的目录]$ mkdir /home/animal# 创建多级目录$ mkdir -p /home/animal/dog# 删除空目录$ rmdir /home/animal/dog# 删除非空目录$ rm -rf /home/animal# 创建空文件$ touch a.txt$ touch a.txt b.txt# 拷贝指令# cp [选项] 源 目的# 将a.txt拷贝到当前目录下的dir文件目录中去$ cp a.txt dir/# -r 递归复制整个文件夹# 将dir1整个目录拷贝到dir2中去$ cp -r dir1/ dir2/# \\ 强制覆盖$ \\cp -r dir1/ dir2/# 移除文件或目录# rm [选项] 要删除的文件或目录# -r 递归删除整个文件夹# -f 强制删除不提示$ rm -rf /# 移动文件与目录或重命名# 重命名 =&gt; 带上了文件$ mv a.txt b.txt# 移动# 将当前目录下的a.txt移动到/home/text$ mv a.txt /home/text# 查看文件内容# cat 只能浏览不能修改# cat [选项] 要查看的文件# -n 显示行号$ cat a.txt# 配合管道指令使用,实现分页 | more$ cat -n a.txt | more# more 指令# enter =&gt; 向下翻一行# space =&gt; 向下翻一页# q =&gt; 离开more，不再显示文件内容$ more a.txt# less 指令# 功能和more类似，但是加载的时候不是一次性全部加载进来，因此看大型文件效率更高$ less a.log# &gt;指令 和 &gt;&gt;指令# 将列表的内容写入a.txt中$ ls -l &gt; a.txt# 将列表的内容追加到a.txt中$ ls -l &gt;&gt; a.txt# 将文件a.txt内容覆盖b.txt$ cat a.txt &gt; b.txt# 将一段内容追加到a.txt$ echo \"hello world\" a.txt# echo指令 和 head指令 以及 tail指令# echo 将内容输出到控制台# 打印环境变量$ echo $PATH# head 显示文件的开头部分，默认是前10行$ head a.txt# 显示前5行$ head -n 5 a.txt# tail 输出文件尾部部分，默认是后10行# 用法和head一样# 追踪文档的所有更新$ tail -f a.txt# 创建软链接# ln -s [原文件或目录] [软链接名]$ ln -s /root linkToRoot# 删除软链接$ rm -rf linkToRoot# 查看已经执行过历史命令$ history# 查看最后10条历史命令$ history 10# 执行历史命令中的第100条命令$ !100 6. 时间日期相关指令1234567891011121314151617# 显示当前日期$ date# 显示当前年份$ date +$Y# 显示当前月份$ date +$m# 显示当前是哪一天$ date+$d# 显示年月日时分秒$ date \"+%Y-%d %H:%M:%S\"# 设置日期$ date -s 字符串时间# 查看日历的指令# cal [选项]$ cal 7. 搜索查找相关指令123456789101112131415161718192021222324252627# find 指令# 从指定目录向下递归地遍历其各个子目录，将满足条件的文件或目录显示在终端# find [搜索范围] [选项]# -name 按照指定的文件名查找模式查找文件# -user 查找属于指定用户名所有文件# -size 按照指定的文件大小查找文件# 查找/home目录下的名字为a.txt的文件$ find /home -name a.txt# 查找/opt目录下的root用户的文件$ find /opt -user root# 查找根目录下大小大于30M的文件$ find / -size +30M# locate 指令# locate指令可以快速定位文件路径，locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件，locate指令无需遍历整个文件系统，查询速度快。# 首先更新数据库$ updatedb# 查询a.txt$ locate a.txt# grep指令 和 管道符号 |# grep 过滤查找， \"|\" 表示将前一个命令的处理结果输出传递到后面的命令处理# grep [选项] 查找内容 源文件# -n 显示匹配行及行号# -i 忽略字母大小写$ grep -in public Hello.java$ cat Hello.java | grep -in public 8. 压缩/解压缩相关指令1234567891011121314151617181920212223242526272829# gzip/gunzip 指令# gzip 用于压缩文件; gunzip 用于解压缩文件# gzip 文件 =&gt; 压缩文件，只能将文件压缩为 *.gz# gunzip 文件.gz =&gt; 解压缩文件命令# 使用gzip压缩文件后，不会保留原来的文件$ gzip a.txt# zip/unzip 指令# zip [选项] xxx.zip 要压缩的内容 =&gt; 压缩文件和目录的命令# unzip [选项] xxx.zip =&gt; 解压缩文件# zip 选项 -r 递归压缩，即压缩目录# unzip 选项 -d[目录] 指定解压后文件的存放目录# 将 /home 下的所有文件进行压缩成 my.zip$ zip -r my.zip /home# 将 my.zip 解压到 /opt/tmp 目录下$ unzip -d /opt/tmp/ my.zip# tar 指令# tar指令是打包指令 *.tar.gz# tar [选项] xxx.tar.gz 打包的内容 =&gt; 打包文件、目录# -c 产生tar打包文件# -v 显示详细信息# -f 指定压缩后的文件名# -z 打包同时压缩# -x 解压tar文件# 将a.txt b.txt 压缩为c.tar.gz$ tar -zcvf c.tar.gz a.txt b.txt# 将 c.tar.gz 解压$ tar -zxvf c.tar.gz","link":"/2020/02/01/2020-2-1-Linux%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%80/"},{"title":"Array.sort源码解析","text":"上一篇博客只是对这个排序来一个大致的框架这里进行全面的解释 改进的插入排序改进的插入排序通过传入布尔值的不同来分别调用传统插入排序还是双插入排序先放一下代码吧 12345678910for (int i = left, j = i; i &lt; right; j = ++i) { int ai = a[i + 1]; while (ai &lt; a[j]) { a[j + 1] = a[j]; if (j-- == left) { break; } } a[j + 1] = ai;} 这是传统的插入排序，迭代将无序值插入到有序的序列中博客Arrays.sort底层源码中有插入排序算法的可视化 那来看看什么是双插入排序 12345678910111213141516171819202122232425262728293031/** Skip the longest ascending sequence.*/do { if (left &gt;= right) { return; }} while (a[++left] &gt;= a[left - 1]);for (int k = left; ++left &lt;= right; k = ++left) { int a1 = a[k], a2 = a[left]; if (a1 &lt; a2) { a2 = a1; a1 = a[left]; } while (a1 &lt; a[--k]) { a[k + 2] = a[k]; } a[++k + 1] = a1; while (a2 &lt; a[--k]) { a[k + 1] = a[k]; } a[k + 1] = a2;}int last = a[right];while (last &lt; a[--right]) { a[right + 1] = a[right];}a[right + 1] = last; 首先，跳过有序的一部分，在对无序的部分进行操作可以看到定义a1和a2分别存储两个相邻需要排序的值，保证a1&gt;a2接着遍历在a1和a2之前的值，找到第一个小于a1的值的位置，这个时候a1就找到组织了继续往前遍历，因为a2必然在a1前面而代码这两个while循环其实就是传统插入算法 因为双插入排序需要相邻的两个元素，那么如果数组个数是奇数怎么办？由于没有相邻的元素与之操作，那么只能在进行一次传统插入排序最后一个while就是对这种情况进行实现的 这里需要提一下双插入排序的一个局限：使用双插入排序的话前面必须得有元素 改进的快速排序双枢轴快速排序1234567891011121314151617181920212223242526272829303132// Inexpensive approximation of length / 7int seventh = (length &gt;&gt; 3) + (length &gt;&gt; 6) + 1;//seventh = (length/8) + (length/64) + 1 = length/7int e3 = (left + right) &gt;&gt;&gt; 1; // The midpoint e1~e5 = 4* length / 7int e2 = e3 - seventh; // 3/14 5/14 7/14 9/14 11/14int e1 = e2 - seventh;int e4 = e3 + seventh;int e5 = e4 + seventh;// Sort these elements using insertion sortif (a[e2] &lt; a[e1]) { int t = a[e2]; a[e2] = a[e1]; a[e1] = t; }if (a[e3] &lt; a[e2]) { int t = a[e3]; a[e3] = a[e2]; a[e2] = t; if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; }}if (a[e4] &lt; a[e3]) { int t = a[e4]; a[e4] = a[e3]; a[e3] = t; if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t; if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; } }}if (a[e5] &lt; a[e4]) { int t = a[e5]; a[e5] = a[e4]; a[e4] = t; if (t &lt; a[e3]) { a[e4] = a[e3]; a[e3] = t; if (t &lt; a[e2]) { a[e3] = a[e2]; a[e2] = t; if (t &lt; a[e1]) { a[e2] = a[e1]; a[e1] = t; } } }}// Pointersint less = left; // The index of the first element of center partint great = right; // The index before the first element of right part 首先，将整个数组划分为7等分，在确定5个分位点使每个分位点之间的距离为length/7每个分位点位置为 3*length/14 5*length/14 7*length/14 9*length/14 11*length/14 然后为了以后选择枢轴做了升序排序根据代码a[e1] != a[e2] &amp;&amp; a[e2] != a[e3] &amp;&amp; a[e3] != a[e4] &amp;&amp; a[e4] != a[e5]看到只有每个节点都不相等时才会使用双枢轴快速排序 在这里我的个人理解是，快速排序的基本思想还是找一个枢轴使大于它的在轴右边，小于轴的放在左边那么改进的双枢轴会不会也是这样呢？无非就是两个轴 12345678int pivot1 = a[e2];int pivot2 = a[e4];a[e2] = a[left];a[e4] = a[right];while (a[++less] &lt; pivot1);while (a[--great] &gt; pivot2); 果然，执行完while后就将这个数组分为了三部分part1都小于pivot1，part3都大于pivot2，而part2中这三种都有(即有大于pivot2，也有小于pivot1和在此之间的) 这个时候正常逻辑就该将part2中属于part1和part3“归还”回去下面的代码实现了这个想法 123456789101112131415161718192021222324252627282930313233outer: for (int k = less - 1; ++k &lt;= great; ) { int ak = a[k]; if (ak &lt; pivot1) { // Move a[k] to left part a[k] = a[less]; //交换less和ak 扩张part1 a[less] = ak; ++less; } else if (ak &gt; pivot2) { // Move a[k] to right part while (a[great] &gt; pivot2) { if (great-- == k) { break outer; //如果只剩最后一个元素，直接跳出 } } if (a[great] &lt; pivot1) { // a[great] &lt;= pivot2 a[k] = a[less]; //因为less已经大于pivot1，因此当a[great] &lt; pivot1,直接交换，使a[great]变成part1一部分 a[less] = a[great]; ++less; //扩张part1 } else { // pivot1 &lt;= a[great] &lt;= pivot2 a[k] = a[great]; } a[great] = ak; //这两句和前面a[less] = ak;++less;作用一样，扩张part3 --great; } } /* * left part center part right part * +----------------------------------------------------------+ * | == pivot1 | pivot1 &lt; &amp;&amp; &lt; pivot2 | ? | == pivot2 | * +----------------------------------------------------------+ * ^ ^ ^ * | | | * less k great */ less是第一个大于pivot1，检查a[k]如果属于第一部分，和less交换然后less+1，完成了part1的扩张如果属于第二部分，不进行操作如果属于第三部分，和great交换然后great-1，完成part3的扩张这个for循环结束将三个部分规划完毕 接下来就需要对part1和part3进行相同的排序 1234567// Swap pivots into their final positionsa[left] = a[less - 1]; a[less - 1] = pivot1;a[right] = a[great + 1]; a[great + 1] = pivot2;// Sort left and right parts recursively, excluding known pivotssort(a, left, less - 2, leftmost);sort(a, great + 2, right, false); 这个时候我们正常思维是不是该递归来排序part2，但是不知道有没有想一个问题如果part1和part3中的值过少怎么办这里如果直接操作part2将同样是个大量工作，为了提高算法，这里进行了一次判断 中间长度&gt; 4/7 of the array 1234567891011121314151617181920212223242526272829303132333435if (less &lt; e1 &amp;&amp; e5 &lt; great) { while (a[less] == pivot1) { ++less; } while (a[great] == pivot2) { --great; } outer: for (int k = less - 1; ++k &lt;= great; ) { int ak = a[k]; if (ak == pivot1) { // Move a[k] to left part a[k] = a[less]; a[less] = ak; ++less; } else if (ak == pivot2) { // Move a[k] to right part while (a[great] == pivot2) { if (great-- == k) { break outer; } } if (a[great] == pivot1) { // a[great] &lt; pivot2 a[k] = a[less]; a[less] = pivot1; ++less; } else { // pivot1 &lt; a[great] &lt; pivot2 a[k] = a[great]; } a[great] = ak; --great; } }} 可以看出来这里主要是找part2中等于pivot1和pivot2的值与刚才的逻辑一样，将等于pivot1的放入左边，等于pivot2的放在右边，在pivot1和pivot2之间的放置中间完成之后才处理pivot1 &lt; &lt;pivot2 sort(a, less, great, false); 单枢轴快速排序单枢轴快速排序的条件是只要有两个节点相等就会执行 123456789101112131415161718192021222324252627282930313233/* * Use the third of the five sorted elements as pivot. * This value is inexpensive approximation of the median. */int pivot = a[e3];for (int k = less; k &lt;= great; ++k) { if (a[k] == pivot) { continue; } int ak = a[k]; if (ak &lt; pivot) { // Move a[k] to left part a[k] = a[less]; a[less] = ak; ++less; } else { // a[k] &gt; pivot - Move a[k] to right part while (a[great] &gt; pivot) { --great; } if (a[great] &lt; pivot) { // a[great] &lt;= pivot a[k] = a[less]; a[less] = a[great]; ++less; } else { // a[great] == pivot a[k] = pivot; } a[great] = ak; --great; }}sort(a, left, less - 1, leftmost);sort(a, great + 1, right, false); 是不是感觉很熟悉，其实就是刚才那段代码将小于枢轴的放在左边，大于枢轴的放在右边，等于的放在中间逻辑清晰，概念明确 归并排序首先判断这个数组适不适合归并排序 12345678910111213141516171819202122232425262728293031323334//程序定义run数组来存储每个子数组的开始下标int[] run = new int[MAX_RUN_COUNT + 1];int count = 0; run[0] = left;// Check if the array is nearly sortedfor (int k = left; k &lt; right; run[count] = k) { if (a[k] &lt; a[k + 1]) { // ascending递增 while (++k &lt;= right &amp;&amp; a[k - 1] &lt;= a[k]); } else if (a[k] &gt; a[k + 1]) { // descending while (++k &lt;= right &amp;&amp; a[k - 1] &gt;= a[k]); for (int lo = run[count] - 1, hi = k; ++lo &lt; --hi; ) { int t = a[lo]; a[lo] = a[hi]; a[hi] = t; } } else { //如果一个序列中相同的值超过33，就进入改进快速排序 for (int m = MAX_RUN_LENGTH; ++k &lt;= right &amp;&amp; a[k - 1] == a[k]; ) { if (--m == 0) { sort(a, left, right, true); return; } } } if (++count == MAX_RUN_COUNT) { sort(a, left, right, true); return; }}// Check special cases// Implementation note: variable \"right\" is increased byif (run[count] == right++) { // The last run contains one element run[++count] = right;} else if (count == 1) { // The array is already sorted return;} 首先一个数组虽然无序中必然存在一部分升序，一部分降序，一部分相等这个for循环就是对序列的一个操作第一步将降序序列变成升序序列而相等序列则会进行第一次检查判断，如果一个序列中相同的值超过33，就进入改进快速排序接着如果这个数组分出了太多&gt;MAX_RUN_COUNT也会判断不适合归并排序 这里还设置了一个哨兵，run[count] == right++如果最后一个元素单独为一个子序列，那么添加一个空序列作为哨兵 接下来正式进入归并排序 12345678910111213141516171819202122232425262728293031323334353637383940414243444546// Determine alternation base for merge确定合并的替换基数byte odd = 0;for (int n = 1; (n &lt;&lt;= 1) &lt; count; odd ^= 1);// Use or create temporary array b for mergingint[] b; // temp array; alternates with aint ao, bo; // array offsets from 'left'int blen = right - left; // space needed for bif (work == null || workLen &lt; blen || workBase + blen &gt; work.length) { work = new int[blen]; workBase = 0;}if (odd == 0) { System.arraycopy(a, left, work, workBase, blen); b = a; bo = 0; a = work; ao = workBase - left;} else { b = work; ao = 0; bo = workBase - left;}// Mergingfor (int last; count &gt; 1; count = last) { for (int k = (last = 0) + 2; k &lt;= count; k += 2) { int hi = run[k], mi = run[k - 1]; for (int i = run[k - 2], p = i, q = mi; i &lt; hi; ++i) { if (q &gt;= hi || p &lt; mi &amp;&amp; a[p + ao] &lt;= a[q + ao]) { b[i + bo] = a[p++ + ao]; } else { b[i + bo] = a[q++ + ao]; } } run[++last] = hi; } if ((count &amp; 1) != 0) { for (int i = right, lo = run[count - 1]; --i &gt;= lo; b[i + bo] = a[i + ao] ); run[++last] = right; } int[] t = a; a = b; b = t; int o = ao; ao = bo; bo = o;} 个人理解在merging之前的一串代码是交换原数组和辅助数组但是具体代码实现理解不是特别清楚 这里的归并排序就是传统的归并排序，具体可视化排序参见上面提到的另一篇博客最后判断时候序列如果为奇数，那么直接就复制到辅助数组 终于结束了以上就是我的个人的理解，可能不是很透彻如果有什么错误欢迎指出","link":"/2019/05/09/2019-5-9-Arrays.sort%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"},{"title":"Linux入门系列(三)","text":"这篇笔记主要记录的是Shell编程相关的知识 一、Shell 编程介绍Shell是一个命令解释器，它为用户提供了一个向Linux内核发送请求以便运行程序的界面系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。 1. 脚本格式要求 脚本以#!/bin/bash开头 脚本需要有可执行权限 2. 脚本快速入门123456789101112131415# 编写一个脚本，输出Hello World# 1. 创建一个shell文件$ vim myShell.sh# 2. 编写内容#!/bin/bashecho \"Hello World!\"# 3. 授予执行权限$ chmod 744 myShell.sh# 4. 执行$ ./myshell.sh=&gt; Hello World! 二、Shell 语法1. Shell 变量Shell 变量分为，系统变量和用户自定义变量。 系统变量：$HOME $PWD $SHELL $USER 显示当前shell的所有变量：set 2. Shell 快速入门（1）案例一：定义变量A12345678910#!/bin/bashA=100echo \"A=$A\"unset Aecho \"A=$A\"================以下是输出================A=100A= （2）案例二：声明静态变量B123456789readonly B=2echo \"B=$B\"unset B # 静态变量不能被 unsetecho \"B\"================以下是输出================B=2./myShell: unset: B: cannot unset: readonly variable 3. Shell 变量的定义（1）变量的基本定义 基本语法 创建变量 变量 = 值 撤销变量 unset 变量 声明静态变量 readonly 变量 注意：不能 unset 1234567891011# ``和$()将命令包裹，可以输出RESULT=`ls /home`echo $RESULTecho \"\" # 输出空行MY_DATE=$(date)echo $MY_DATE================以下是输出================tom zwj # 这里相当于运行了 ls /home2020年 02月 05日 星期三 20:25:34 CST 注意事项：** 变量名称可由字母、数字和下划线组成，但不能以数字开头 等号两侧不能有空格 变量名称一般习惯为大写 （2）设置环境变量12345678# 将 shell变量输出为环境变量export 变量名=变量值# 让修改后的配置信息立即生效source 配置文件# 查询环境变量的值echo $变量名 具体操作： 12345678910111213141516171819202122232425# 修改配置文件$ vim /etc/profile# 定义自己的环境变量TOMCAT_HOME=/opt/tomcatexport TOMCAT_HOME# 刷新环境变量$ source /etc/profile# 测试输出$ echo $TOMCAT_HOME=&gt; /opt/tomcat# 在自己的文件中使用$ vim myShell.sh# 编写 myShell.shecho \"tomcat=$TOMCAT_HOME\"# 测试 myShell.sh$ ./myShell.sh================以下是输出================tomcat=/opt/tomcat （3）位置参数变量当我们执行一个Shell脚本时，如果希望获取到命令行的参数信息，就可以使用到位置参数变量 对于 ./myShell.sh 100 200 符号 功能描述 $n n表示数字，$0就是./myShell.sh , $1就是100，$1-$9代表第一到第九个参数，十以上的参数需要大括号包含 ${10} $* 代表命令行中所有的参数，$*把所有的参数当成一个整体 在这里就是把100 200当成一个整体 $@ 也代表命令行中所有的参数，不过是把每一个参数区分对待 $# 代表命令行中所有参数的个数 案例说明 123456789# position.sh#!/bin/bash# 获取到各个参数echo \"$0 $1 $2\"echo \"$*\"echo \"$@\"echo \"参数个数=$#\" 1234567891011121314# 创建 position.sh 文件，并将上面的代码复制进来$ vim position.sh# 修改权限$ chmod 744 position.sh# 运行$ ./position.sh================以下是输出================./position.sh 100 200100 200100 200参数个数=2 （4）预定义变量就是Shell设计者事先已经定义好的变量，可以直接在Shell脚本中应用 预定义变量 功能描述 $$ 当前进程的进程号（PID） $! 后台运行的最后一个进程的进程号（PID） $? 最后一次执行的命令的返回状态，如果这个变量的值为0，证明上一个命令正确执行，如果非零，则上一个命令执行不正确 案例说明 1234567#!/bin/bashecho \"当前进程号=$$\"# 以后台方式运行 myShell.sh./myShell.sh &amp;echo \"最后的进程的号=$!\"echo \"执行的值=$?\" （5）运算符 “$((运算式))” 或 “$[运算式]” expr m + n =&gt; m + n 注意expr运算符间要有空格 expr \\ * , / , % 乘 除 取余 4. Shell 的控制语句（1）条件判断基本语法 12345678910111213if [ 条件判断 ] then 程序fiif [ 条件判断 ] then 程序 elif [ 条件判断 ] then 程序fi 语句样式 [ condition ] （注意 “condition” 前后有空格） 非空返回 true 可使用 $? 验证（0 为 true ， &gt;1 为false） 123[ daisy ] # true[] # false[ condition ] &amp;&amp; echo OK || echo not OK # 条件满足，执行后面的语句 判断语句 符号 功能 符号 功能 = 字符串比较 -r 有读的权限 -lt 小于 -w 有写的权限 -le 小于等于 -x 有执行的权限 -eq 等于 -gt 大于 -f 文件存在并且是一个常规文件 -ge 大于等于 -e 文件存在 -ne 不等于 -d 文件存在并是一个目录 案例说明 12345678910111213141516#!/bin/bash# \"ok\" 是否等于 \"ok\"if [ \"ok\" = \"ok\" ]then echo \"equal\"fi# fi 表示结束# then 成立就执行# /root/shell/a.txt 是否存在if [ -e /root/shell/a.txt ]then echo \"exist\"fi （2）case 语句基本语法 123456789101112case $变量名 in\"值1\") 如果变量的值等于值1，则执行程序一 ;; # 相当于 break\"值2\") 如果变量的值等于值2，则执行程序二 ;; ... # 省略其他分支* ) 如果变量的值都不是以上的值，则执行此程序 ;;esac （3）for 循环基本语法 12345678910for 变量 in 值1，值2，值3do 程序donefor (( 初始值; 循环控制条件; 变量变化 ))do 程序done 案例说明 1234567# 从1加到100的值输出显示SUM=0for((i=1;i&lt;100;i++))do SUM=$[$SUM+$i]doneecho \"$SUM\" （4）while 循环基本语法 1234while [ 条件判断式 ]do 程序done 案例说明 12345678910# 从命令行输入一个数，统计 1+2+..+n 的值SUM=0i=0while [ $i -le $1 ]do SUM=$[$SUM+$i] i=$[$i+1]doneecho \"sum=$SUM\" 5. 读取控制台输入基本语法 123# read(选项)(参数)# -p 制定读取值时的提示符# -t 指定读取值时等待的时间(秒)，如果没有在指定的时间输入，就不再等待 案例说明 123# 读取控制台输入的num值，在10秒内输入read -t 10 -p \"请输入一个数num=\" NUMecho \"你输的数是$NUM\" 6. 函数函数分为系统函数和自定义函数 （1）系统函数1234567891011# basename 返回完整路径最后/ 的部分，常用于获取文件名# 返回 /home/aaa/text.txt 的 \"test.txt\"部分$ basename /home/aaa/test.txt=&gt; test.txt$ basename /home/aaa/text.txt .txt=&gt; test# dirname 返回完整路径最后的/ 的前面部分，常用于返回路径部分# 返回 /home/aaa/text.txt 的 \"/home/aaa\"部分$ dirname /home/aaa/test.txt=&gt; /home/aaa （2）自定义函数基本语法 1234567[ function ] funname[()]{ Action; [return int;]}# 调用直接写函数名 funname 案例说明 12345678910# 计算输入两个参数的和function getSum() { SUM=$[$n1+$n2] echo \"总和为$SUM\"}read -p \"请输入第一个数n1\" n1read -p \"请输入第一个数n2\" n2getSum $n1 $n2","link":"/2020/02/05/2020-2-5-Linux%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%B8%89/"},{"title":"Linux入门系列(二)","text":"这篇笔记主要记录的是Linux操作系统相关的知识 一、组管理1. Linux组的基本介绍在Linux中每一个文件都有所有者、所在组、其它组的概念 所有者 所在组 其它组 改变用户所在的组 所有者就是这个文件是谁的，所在组默认的就是所有者所在的组，而其它组就是除去所在组以外的所有其它的组。 2. 文件/目录所有者一般为文件的创建者，谁创建了文件就自然的成为该文件的所有者。 1234567# 查看文件的所有者$ ls -ahl# 修改文件的所有者# chown 用户名 文件名# 将root用户的a.txt更改为tom的$ chown tom a.txt （1）查看文件的所有者 3. 文件/目录所在组但某个用户创建一个文件后，这个文件的所在组就是该用户所在的组。 123# 修改文件所在组# chgrp 组名 文件名$ chgrp wudang a.txt 二、权限管理1. 权限的基本介绍123456789101112131415161718192021222324252627282930313233343536-rw-r--r--. 1 zwj wudang 6 2月 3 03:10 a.txt# 分析 -rw-r--r--1. -表示这个文件是普通文件 -:普通文件 d:目 录 l:软链接 c:字符设备[键盘，鼠标] b:块文件，硬盘 2. rw-表示tom可以对这个文件可读可写 read write3. r--表示所在组的成员只用读的权限 文件所在组的用户的权限4. r--表示其他组的用户只有读的权限 其它组的用户的权限# 分析 1如果是文件 =&gt; 1表示硬连接如果是目录 =&gt; 数字表示这个子目录个数# 分析 zwj文件所有者是zwj# 分析 wudang表示文件所在组是wudang# 分析 6表示文件的大小如果是目录就会显示 4096# 分析 2月 3 03:10表示文件最后的修改时间# a.txt文件名 2. rwx权限详解（一）rwx作用到文件 【r】 表示可读，可以读取查看 【w】表示可写，可以修改，但是不代表可以删除，除非对该文件所在的目录有写权限 【x】 表示可执行，可以被执行 （二）rwx作用到目录 【r】 表示可读，可以读取，ls查看目录内容 【w】表示可写，可以修改，目录内创建+删除+重命名目录 【x】表示可执行，可以进入该目录 可用数字表示为 r=4 w=2 x=1 因此rwx=4+2+1=7 3. 修改权限123456789101112131415161718192021# chmod 指令# 第一种方式 +、-、= 变更权限# u =&gt; 所有者 g =&gt; 所有组 o =&gt; 其他人 a =&gt; 所有人(u、g、o的总和)# 对于文件a.txt给所有者读写和执行的权限，所在组读写的权限，给其他人读的权限$ chmod u=rwx,g=rw,g=r a.txt# 给其他人增加一个写的权限$ chmod o+w a.txt# 给所有人都减少一个写的权限$ chmod a-w a.txt# 第二种方式 通过数字更改权限# r=4 w=2 x=1 rwx=4+2+1=7# chmod 751 a.txt &lt;=&gt; chmod u=rwx,g=rx,o=x a.txt$ chmod 751 a.txt# chown 修改文件所有者# chown在前面讲过，但是也可以通过这个指令更改我呢就爱你的所有者和所在组# chown newowner:newgroup file =&gt; 改变用户的所有者和所有组# -R 如果是目录，则使其下所有子文件或目录递归生效$ chown newowner:newgroup file 三、任务调度 cron是chronograph的缩写,计时器的意思,crond就是cron daemon,crontab就是cron table 任务调度，是指系统在某一个时间执行的特定的命令或程序 123456789101112# crontab 进行定时任务的设置# crontab [选项]# -e 编辑crontab定时任务# -l 查询crontab任务# -r 删除当前用户所有的crontab任务# 设置一个调度任务，每小时的每分钟执行 ls -l /etc/ &gt;&gt; /tmp/to.txt$ crontab -e# 会进入vim编辑中，写入 */1 * * * * ls -l /etc/ &gt;&gt; /tmp/to.txt# 重启任务调度$ service crond restart 四、磁盘分区、挂载1. 分区基础知识（1）分区的方式MBR 分区 最多支持四个主分区 系统只能安装在主分区 扩展分区要占一个分区 MBR最大只支持2TB，但拥有最好的兼容性 GPT分区 支持无限多个主分区（操作系统可能有限制，Windows最多128个分区） 最大支持18EB的大容量（1EB= 1024PB 1PB = 1024TB） Windows7 64位以后支持GPT （2）Linux 分区Linux无论有几个分区，分给哪一个目录使用，它归根结底只有一个根目录，一个独立且唯一的文件结构，Linux中每一个分区都是用来组成整个文件系统的一部分。 就是将各个分区挂载在不同的目录下，曾经安装双系统的时候，选择手动分区就是这个意思。 123# 查看分区# 命令记忆 =&gt; 老师不离开$ lsblk -f （3）挂载案例如何增加一块硬盘？ 虚拟机添加硬盘 分区 格式化 挂载 设置永久挂载 12345678910111213141516171819202122232425# 1.虚拟机首先添加一块硬盘# 2.重启后查看磁盘$ reboot$ lsblk -f # 此时会看到一的新的分区 sdb# 3.分区$ fdisk /dev/sdb# 接着输入 m =&gt; 然后输入 n =&gt; p =&gt; 1 =&gt; 默认 =&gt; 默认 =&gt; w# 4.格式化$ mkfs -t ext4 /dev/sdb1# 5.挂载# 创建一个需要挂载的目录$ mkdir /home/newDisk# 挂载$ mount /dev/sdb1 /home/newDisk# 6.永久挂载$ vim /etc/fstab# 添加如下内容/dev/sdb1 /home/newDisk ext4 defaults 0 0$ mount -a$ reboot 2. 磁盘情况查询1234567891011# 查询系统整体磁盘使用情况$ df -lh# 查询指定目录的磁盘占用情况# du -h /目录# -s 指定目录占用大小汇总# -h 带计量单位# -a 含文件# --max-depth=1 子目录深度# -c 列出明细同时，增加汇总量$ du -h /opt 3. 工作中常用指令123456789# 统计/home目录下文件的个数# wc 统计的意思$ ls -l /home | grep \"^-\" | wc -l# 统计/home目录下目录的个数$ ls -l /home | grep \"^d\" | wc -l# 统计/home目录下文件的个数包括子目录下的$ $ ls -lR /home | grep \"^-\" | wc -l 五、网络配置网络环境配置1. IP不固定系统 =&gt; 首选项 =&gt; 网络连接 =&gt; 编辑 =&gt; 自动连接 2. IP固定123456789101112# 修改网络配置文件vim /etc/sysconfig/network-scripts/ifcfg-eth0# 添加如下几行ONBOOT=yesBOOTPROTO=ststicIPADDR=192.168.254.128GATEWAY=192.168.254.2DNS1=192.168.254.2# 重启服务$ service network restart 六、进程管理1. 进程的基本介绍在Linux系统中，每个执行的程序都称为一个进程，每一个进程都分配一个ID号。我在学操作系统的时候，老师说进程就是程序的一次执行过程。 每一个进程都会对应一个父进程，而这个父进程可以复制多个子进程。 每个进程都可以以两种方式存在：前台和后台，后台又叫守护进程。 2. 显示系统进程12345678910111213141516# 显示系统正在执行的进程# -a 显示当前终端的所有进程信息# -u 以用户格式显示进程信息# -x 显示后台进程运行的参数$ ps -aux | more# 查找 sshd 的进程$ ps -aux | grep sshd# 查看父进程$ ps -ef# 查看进程树# -p 显示进程的PID# -u 显示进程的所属用户$ pstree -p 字段 说明 user 用户名 PID 进程 ID %CPU 占用的 CPU %MEM 占用内存 VSZ 使用的虚拟存储情况 （单位：KB） RSS 使用的物理存储情况 （单位：KB） TTY 使用的终端 STAT 进程的状态 S:休眠 R：运行 START 启动时间 TIME 占用CPU的总时间 COMMAND 进程执行时的命令行 3. 终止进程12345678910# kill指令 和 killall指令# kill [选项] 进程号 =&gt; 通过进程号杀死进程# -9 强迫进程立即停止# 终止远程登陆服务# 1.查到远程登陆的进程号$ ps -aux | grep sshd# 2.根据得到的进程号杀死进程$ kill 4010# killall 进程名称 =&gt; 通过进程名称杀死进程，支持通配符 4. 服务管理服务（service）本质就是进程，但是运行在后台的通常都会监听某个端口，等待其他程序的请求。 （1）防火墙操作12345678910111213141516# service管理命令# service 服务名 [start|restart|reload|status]# CentOS7.0以后用的是systemctl代替service# 查看防火墙状态$ service iptables stauts# 关闭防火墙$ service iptables stop# 重启防火墙$ service iptables start# 使用telnet指令检查Linux的某一个端口是否在监听，并且可以访问# windows 打开 telnet ip 端口telnet 192.168.254.128 22# 注意：如果提示telnet不是内部命令，如下解决# 打开控制面板 =&gt; 程序 =&gt; 打开或关闭Windows功能 =&gt; 勾选Telnet （2）服务状态及级别123456789101112# 查看服务名# 方法一：使用setup =&gt; 系统服务就可以看到$ setup# 方法二：/etc/init.d$ ls -l /etc/init.d/# 运行级别，在《Linux入门系列(一)》中有涉及$ vim /etc/inittab# chkconfig 可以给每个服务的各个运行级别设置自启动/关闭# 查看服务 chkconfig --list | grep xxx# chkconfig 服务名 --list# chkconfig --level 5 服务名 on/off 5. 进程监控（1）动态监控进程top 和ps命令相似，它们都是来显示正在执行的进程，top与ps最大的不同之处在于top在执行一段时间可以更新正在运行的进程。 12345# top指令# -d秒数 指定top命令每隔几秒更新，默认是3在top命令的交互模式当中可以执行的命令# -i 使top不显示任何闲置或者僵尸进程# -p 通过指定监控进程ID来仅仅监控某一个进程的状态$ top --list （2）查看系统网络情况12345# netstat 指令# netstat [选项]# -an 按一定顺序排列输出# -p 显示哪个进程在调用$ netstat -anp 七、软件包管理1. rpm包管理一种用于互联网下载包的打包及管理工具，它包含在某些Linux发行版中。它生成具有.PRM 扩展名的文件。RPM的全名是RedHat Package Manager（RedHat软件包管理工具），类似Windows的setup.exe。 12345678910111213141516171819# 查看已安装的rpm列表$ rpm -qa$ rpm -qa | grep firefox# 结果如下# firefox-17.0.10-1.el6.centos.x86_64# firefox 软件名 17.0.10-1 版本号 el6.centos.x86_64 适用系统是centos6.x的64位系统# 如果是i686、i386表示32位系统，noarch表示通用# 查询安装的软件的安装路径$ rpm -ql firefox# 安装rpm包# rpm -ivh RPM包的名称# i install v verbose提示 h hash 进度条$ rpm -ivh firefox# 卸载rpm包# rpm -e RPM包的名称$ rpm -e firefox （2）yum安装yum是一个Shell前端软件包管理器。基于RPM包管理，能够从指定的服务器自动下载RPM包并且安装，可以自动处理依赖性关系，并且一次安装所有依赖的软件包。 12345# yum指令# 查询yum服务器是否有需要安装的软件# yum list | grep xx# 安装指定的yum包# yum install xxx 八、 Ubuntu 系统除了Centos以外，Ubuntu也是Linux的一个应用广泛的发行版，并且对Python的支持很好，但是由于是不同的发行版操作方式略有区别，这里只是介绍一下。 1. apt软件包管理apt是Advanced Packaging Tool的简称，是一款安装包管理工具，在Ubuntu下，我们可以使用apt命令用于软件包的安装、删除、清理等。类似于Windows中的软件工具。 12345678910111213141516171819202122232425262728293031# 更新源$ sudo apt-get update# 安装包$ sudo apt-get install package# 删除包$ sudo apt-get remove package# 搜索软件包$ sudo apt-cache search package# 获取包的管理信息，大小、说明、版本等$ sudo apt-cache show package# 重新安装包$ sudo apt-get install package-reinstall# 修复安装$ sudo apt-get -f install# 删除包，包括配置文件$ sudo apt-get remove package --purge# 安装相关的编译环境$ sudo apt-get build-dep package# 更新已安装的包$ sudo apt-get upgrade# 升级系统$ sudo apt-get dist-upgrade# 了解使用该包依赖哪些包$ sudo apt-cache depends package# 查看该包被哪些包依赖$ sudo apt-cache rdepends package# 下载该包的源代码$ sudo apt-get source package 2. 更换软件源使用清华的软件源，建议先备份再修改配置文件 123456# 地址为 https://mirrirs.tuna.tsinghua.edu/ubuntu# 修改配置文件$ vim /etc/apt/sources.list# 更新$ sudo apt-get update 3. SSH远程登录由于Ubuntu没有sshd远程登陆，因此需要使用安装SSH服务。 1234# 安装SSH$ sudo apt-get install openssh-server# 启用$ service sshd restart","link":"/2020/02/01/2020-2-3-Linux%E5%85%A5%E9%97%A8%E7%B3%BB%E5%88%97%E4%BA%8C/"}],"tags":[{"name":"java","slug":"java","link":"/tags/java/"},{"name":"服务器","slug":"服务器","link":"/tags/%E6%9C%8D%E5%8A%A1%E5%99%A8/"},{"name":"C++","slug":"C","link":"/tags/C/"},{"name":"方寸","slug":"方寸","link":"/tags/%E6%96%B9%E5%AF%B8/"},{"name":"javaScript","slug":"javaScript","link":"/tags/javaScript/"},{"name":"electron","slug":"electron","link":"/tags/electron/"},{"name":"PC","slug":"PC","link":"/tags/PC/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"源码","slug":"源码","link":"/tags/%E6%BA%90%E7%A0%81/"},{"name":"Linux","slug":"Linux","link":"/tags/Linux/"},{"name":"笔记","slug":"笔记","link":"/tags/%E7%AC%94%E8%AE%B0/"}],"categories":[]}